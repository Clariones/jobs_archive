<devicedata>
    <copyright>Copyright 2004-2008 Control4 Corporation.  All rights reserved.</copyright>
    <creator>SkyNet</creator>
    <manufacturer>AO SONG</manufacturer>
    <name>Humiture Sensor</name>
    <model>AW1485A</model>
    <created>01/01/2016 11:06 AM</created>
    <modified>01/21/2016 7:00 PM</modified>
    <version>10</version>
    <small>devices_sm\c4.gif</small>
    <large>devices_lg\c4.gif</large>
    <control>lua_gen</control>
    <controlmethod>serial</controlmethod>
    <driver>DriverWorks</driver>
    <search_type>SkyNet</search_type>
    <combo>True</combo>
    <OnlineCategory>others</OnlineCategory>
    <proxies qty="1">
        <proxy>HumitureSensor_232_AoSong_AW1485A</proxy>
    </proxies>
    <connections>
        <connection>
            <id>1</id>
            <facing>6</facing>
            <connectionname>Serial RS-232</connectionname>
            <type>1</type>
            <consumer>True</consumer>
            <audiosource>False</audiosource>
            <videosource>False</videosource>
            <linelevel>False</linelevel>
            <classes>
                <class>
                    <classname>RS_232</classname>
                </class>
            </classes>
        </connection>
        <connection>
            <id>2</id>
            <facing>1</facing>
            <connectionname>DATA_PROXY</connectionname>
            <type>1</type>
            <consumer>True</consumer>
            <audiosource>False</audiosource>
            <videosource>False</videosource>
            <linelevel>True</linelevel>
            <classes>
                <class>
                    <classname>DATA_PROXY</classname>
                    <autobind>True</autobind>
                </class>
            </classes>
        </connection>
    </connections>
    <config>
        <identify_text>Humiture Sensor AW1485A</identify_text>
        <power_management_method>AlwaysOn</power_management_method>
        <power_command_delay>0</power_command_delay>
        <power_delay>0</power_delay>
        <power_command_needed>False</power_command_needed>
        <serialsettings>9600 8 none 1 none </serialsettings>
        <documentation>
        </documentation>
        <script><![CDATA[--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Driver Declarations
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[

  Command Handler Tables

--]]
EX_CMD = {}
PRX_CMD = {}
NOTIFY = {}
DEV_MSG = {}
LUA_ACTION = {}

--[[

Tables of functions
The following tables are function containers that are called within the following functions:  
  OnDriverInit()
    - first calls all functions contained within ON_DRIVER_EARLY_INIT table
    - then calls all functions contained within ON_DRIVER_INIT table

  OnDriverLateInit()
    - calls all functions contained within ON_DRIVER_LATEINIT table

  OnDriverUpdate()
    - calls all functions contained within ON_DRIVER_UPDATE table

  OnDriverDestroyed()
    - calls all functions contained within ON_DRIVER_DESTROYED table

  OnPropertyChanged()
    - calls all functions contained within ON_PROPERTY_CHANGED table

--]]
ON_DRIVER_INIT = {}
ON_DRIVER_EARLY_INIT = {}
ON_DRIVER_LATEINIT = {}
ON_DRIVER_UPDATE = {}
ON_DRIVER_DESTROYED = {}
ON_PROPERTY_CHANGED = {}

-- Constants
DEFAULT_PROXY_BINDINGID = 5001

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Common Driver Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[
  OnPropertyChanged
    Function called by Director when a property changes value.
  Parameters
    sProperty
      Name of property that has changed.

  Remarks
    The value of the property that has changed can be found with: Properties[sName]. Note
    that OnPropertyChanged is not called when the Property has been changed by the driver
    calling the UpdateProperty command, only when the Property is changed by the user from
    the Properties Page. This function is called by Director when a property changes value.
--]]
function OnPropertyChanged(sProperty)
  Dbg:Trace("OnPropertyChanged(" .. sProperty .. ") changed to: " .. Properties[sProperty])

  local propertyValue = Properties[sProperty]

  -- Remove any spaces (trim the property)
  local trimmedProperty = string.gsub(sProperty, " ", "")

  -- if function exists then execute (non-stripped)
  if (ON_PROPERTY_CHANGED[sProperty] ~= nil and type(ON_PROPERTY_CHANGED[sProperty]) == "function") then
    ON_PROPERTY_CHANGED[sProperty](propertyValue)
    return
    -- elseif trimmed function exists then execute
  elseif (ON_PROPERTY_CHANGED[trimmedProperty] ~= nil and type(ON_PROPERTY_CHANGED[trimmedProperty]) == "function") then
    ON_PROPERTY_CHANGED[trimmedProperty](propertyValue)
    return
  end

  DriverLib.onPropertyChanged(sProperty, propertyValue)
end

function ON_PROPERTY_CHANGED.DebugMode(propertyValue)
  gDebugTimer:KillTimer()
  Dbg:OutputPrint(propertyValue:find("Print") ~= nil)
  Dbg:OutputC4Log(propertyValue:find("Log") ~= nil)
  if (propertyValue == "Off") then return end
  gDebugTimer:StartTimer()
end

function ON_PROPERTY_CHANGED.DebugLevel(propertyValue)
  Dbg:SetLogLevel(tonumber(string.sub(propertyValue, 1, 1)))
end

---------------------------------------------------------------------
-- ExecuteCommand Code
---------------------------------------------------------------------
--[[

  ExecuteCommand
    Function called by Director when a command is received for this DriverWorks driver.
    This includes commands created in Composer programming.
  Parameters
    sCommand
      Command to be sent
    tParams
      Lua table of parameters for the sent command
--]]
function ExecuteCommand(sCommand, tParams)
  Dbg:Trace("ExecuteCommand(" .. sCommand .. ")")
  Dbg:Info(tParams)

  -- Remove any spaces (trim the command)
  local trimmedCommand = string.gsub(sCommand, " ", "")

  -- if function exists then execute (non-stripped)
  if (EX_CMD[sCommand] ~= nil and type(EX_CMD[sCommand]) == "function") then
    EX_CMD[sCommand](tParams)
    -- elseif trimmed function exists then execute
  elseif (EX_CMD[trimmedCommand] ~= nil and type(EX_CMD[trimmedCommand]) == "function") then
    EX_CMD[trimmedCommand](tParams)
    -- handle the command
  elseif (EX_CMD[sCommand] ~= nil) then
    QueueCommand(EX_CMD[sCommand])
  else
    Dbg:Alert("ExecuteCommand: Unhandled command = " .. sCommand)
  end
end

--[[

  Define any functions of commands (EX_CMD.<command>) received from ExecuteCommand that need to be handled by the driver.

--]]

--[[

  EX_CMD.LUA_ACTION

    Function called for any actions executed by the user from the Actions Tab in Composer.

--]]
function EX_CMD.LUA_ACTION(tParams)
  if tParams ~= nil then
    for cmd,cmdv in pairs(tParams) do
      if cmd == "ACTION" then
        if (LUA_ACTION[cmdv] ~= nil) then
          LUA_ACTION[cmdv]()
        else
          Dbg:Alert("Undefined Action")
          Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
        end
      else
        Dbg:Alert("Undefined Command")
        Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
      end
    end
  end
end

--[[

  LUA_ACTION.DisplayGlobals
    Implementation of Action "Display Globals". Executed when selecting the "Display Globals" action within Composer.
    Provided as an example for actions.
--]]
function LUA_ACTION.DisplayGlobals()
  print ("Global Variables")
  print ("----------------------------")

  for k,v in pairs(_G) do -- globals`
    if not (type(v) == "function") then
      --print(k .. ":  " .. tostring(v))
      if (string.find(k, "^g%L")  == 1) then
        print(k .. ":  " .. tostring(v))
        if (type(v) == "table") then
          PrintTable(v, "   ")
        end
      end
  end
  end

  print ("")
end

function PrintTable(tValue, sIndent)
  sIndent = sIndent or "   "
  for k,v in pairs(tValue) do
    print(sIndent .. tostring(k) .. ":  " .. tostring(v))
    if (type(v) == "table") then
      PrintTable(v, sIndent .. "   ")
    end
  end
end

---------------------------------------------------------------------
-- ReceivedFromProxy Code
---------------------------------------------------------------------
--[[

  ReceivedFromProxy(idBinding, sCommand, tParams)
    Function called by Director when a proxy bound to the specified binding sends a
    BindMessage to the DriverWorks driver.
  Parameters
    idBinding
      Binding ID of the proxy that sent a BindMessage to the DriverWorks driver.
    sCommand
      Command that was sent
    tParams
      Lua table of received command parameters

--]]
function ReceivedFromProxy(idBinding, sCommand, tParams)
  if (sCommand ~= nil) then
    if(tParams == nil)    -- initial table variable if nil
    then tParams = {}
    end
    Dbg:Trace("ReceivedFromProxy(): " .. sCommand .. " on binding " .. idBinding .. "; Call Function " .. sCommand .. "()")
    Dbg:Info(tParams)

    if (PRX_CMD[sCommand]) ~= nil then
      PRX_CMD[sCommand](idBinding, tParams)
    else
      Dbg:Alert("ReceivedFromProxy: Unhandled command = " .. sCommand)
    end
  end
end

---------------------------------------------------------------------
-- Notification Code
---------------------------------------------------------------------
-- notify with parameters
function SendNotify(notifyText, Parms, bindingID)
  C4:SendToProxy(bindingID, notifyText, Parms, "NOTIFY")
end

-- A notify with no parameters
function SendSimpleNotify(notifyText, ...)
  bindingID = select(1, ...) or DEFAULT_PROXY_BINDINGID
  C4:SendToProxy(bindingID, notifyText, {}, "NOTIFY")
end

---------------------------------------------------------------------
-- Initialization/Destructor Code
---------------------------------------------------------------------
--[[

















  OnDriverInit

















    Invoked by director when a driver is loaded. This API is provided for the driver developer to contain all of the driver

















    objects that will require initialization.

















--]]
function OnDriverInit()
  C4:ErrorLog("INIT_CODE: OnDriverInit()")
  -- Call all ON_DRIVER_EARLY_INIT functions.
  for k,v in pairs(ON_DRIVER_EARLY_INIT) do
    if (ON_DRIVER_EARLY_INIT[k] ~= nil and type(ON_DRIVER_EARLY_INIT[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_EARLY_INIT." .. k .. "()")
      ON_DRIVER_EARLY_INIT[k]()
    end
  end

  -- Call all ON_DRIVER_INIT functions
  for k,v in pairs(ON_DRIVER_INIT) do
    if (ON_DRIVER_INIT[k] ~= nil and type(ON_DRIVER_INIT[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_INIT." .. k .. "()")
      ON_DRIVER_INIT[k]()
    end
  end

  -- Fire OnPropertyChanged to set the initial Headers and other Property global sets, they'll change if Property is changed.
  for k,v in pairs(Properties) do
    OnPropertyChanged(k)
  end
end

--[[

  OnDriverUpdate
    Invoked by director when an update to a driver is requested. This request can occur either by adding a new version of a driver
    through the driver search list or right clicking on the driver and selecting "Update Driver" from within ComposerPro.

--]]
function OnDriverUpdate()
  C4:ErrorLog("INIT_CODE: OnDriverUpdate()")

  -- Call all ON_DRIVER_UPDATE functions
  for k,v in pairs(ON_DRIVER_UPDATE) do
    if (ON_DRIVER_UPDATE[k] ~= nil and type(ON_DRIVER_UPDATE[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_UPDATE." .. k .. "()")
      ON_DRIVER_UPDATE[k]()
    end
  end
end

--[[

  OnDriverLateInit
    Invoked by director after all drivers in the project have been loaded. This API is provided
    for the driver developer to contain all of the driver objects that will require initialization
    after all drivers in the project have been loaded.

--]]
function OnDriverLateInit()
  C4:ErrorLog("INIT_CODE: OnDriverLateInit()")

  -- Call all ON_DRIVER_LATEINIT functions
  for k,v in pairs(ON_DRIVER_LATEINIT) do
    if (ON_DRIVER_LATEINIT[k] ~= nil and type(ON_DRIVER_LATEINIT[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_LATEINIT." .. k .. "()")
      ON_DRIVER_LATEINIT[k]()
    end
  end
end


--[[

  OnDriverDestroyed

    Function called by Director when a driver is removed. Release things this driver has allocated such as timers.

--]]
function OnDriverDestroyed()
  C4:ErrorLog("INIT_CODE: OnDriverDestroyed()")
  -- Call all ON_DRIVER_DESTROYED functions
  for k,v in pairs(ON_DRIVER_DESTROYED) do
    if (ON_DRIVER_DESTROYED[k] ~= nil and type(ON_DRIVER_DESTROYED[k]) == "function") then
      C4:ErrorLog("INIT_CODE: ON_DRIVER_DESTROYED." .. k .. "()")
      ON_DRIVER_DESTROYED[k]()
    end
  end
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Debug Logging Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Log = {}

-- Create a Table with Logging functions
function Log:Create()

  -- table for logging functions
  local lt = {}

  lt._logLevel = 0
  lt._outputPrint = false
  lt._outputC4Log = false
  lt._logName =  "Set Log Name to display"

  function lt:SetLogLevel(level)
    self._logLevel = level
  end

  function lt:OutputPrint(value)
    self._outputPrint = value
  end

  function lt:OutputC4Log(value)
    self._outputC4Log = value
  end

  function lt:SetLogName(name)
    self._logName = name
  end

  function lt:Enabled()
    return (self._outputPrint or self._outputC4Log)
  end

  function lt:PrintTable(tValue, sIndent)
    if (type(tValue) == "table") then
      if (self._outputPrint) then
        for k,v in pairs(tValue) do
          print(sIndent .. tostring(k) .. ":  " .. tostring(v))
          if (type(v) == "table") then
            self:PrintTable(v, sIndent .. "   ")
          end
        end
      end

      if (self._outputC4Log) then
        for k,v in pairs(tValue) do
          C4:ErrorLog(self._logName .. ": " .. sIndent .. tostring(k) .. ":  " .. tostring(v))
          if (type(v) == "table") then
            self:PrintTable(v, sIndent .. "   ")
          end
        end
      end

    else
      if (self._outputPrint) then
        print (sIndent .. tValue)
      end

      if (self._outputC4Log) then
        C4:ErrorLog(self._logName .. ": " .. sIndent .. tValue)
      end
    end
  end

  function lt:Print(logLevel, sLogText)
    if (self._logLevel >= logLevel) then
      if (type(sLogText) == "table") then
        self:PrintTable(sLogText, "   ")
        return
      end

      if (self._outputPrint) then
        print (sLogText)
      end

      if (self._outputC4Log) then
        C4:ErrorLog(self._logName .. ": " .. sLogText)
      end
    end
  end

  function lt:Alert(strDebugText)
    self:Print(0, strDebugText)
  end

  function lt:Error(strDebugText)
    self:Print(1, strDebugText)
  end

  function lt:Warn(strDebugText)
    self:Print(2, strDebugText)
  end

  function lt:Info(strDebugText)
    self:Print(3, strDebugText)
  end

  function lt:Trace(strDebugText)
    self:Print(4, strDebugText)
  end

  function lt:Debug(strDebugText)
    self:Print(5, strDebugText)
  end

  return lt
end

function ON_DRIVER_EARLY_INIT.LogLib()
  -- Create and initialize debug logging
  Dbg = Log.Create()
  Dbg:SetLogName("SmartSwitch")
end

function ON_DRIVER_INIT.LogLib()
  -- Create Debug Timer
  gDebugTimer = Timer:Create("Debug", 45, "MINUTES", OnDebugTimerExpired)
end

--[[

  OnDebugTimerExpired
    Debug timer callback function

--]]
function OnDebugTimerExpired()
  Dbg:Warn("Turning Debug Mode Off (timer expired)")
  gDebugTimer:KillTimer()
  C4:UpdateProperty("Debug Mode", "Off")
  OnPropertyChanged("Debug Mode")
end

---------------------------------------------------------------------
-- Timer Code
---------------------------------------------------------------------
Timer = {}

-- Create a Table with Timer functions
function Timer:Create(name, interval, units, Callback, repeating, Info)
  -- timers table
  local tt = {}

  tt._name = name
  tt._timerID = TimerLibGetNextTimerID()
  tt._interval = interval
  tt._units = units
  tt._repeating = repeating or false
  tt._Callback = Callback
  tt._info = Info or ""
  tt._id = 0

  function tt:StartTimer(...)
    self:KillTimer()

    -- optional parameters (interval, units, repeating)
    if ... then
      local interval = select(1, ...)
      local units = select(2, ...)
      local repeating = select(3, ...)

      self._interval = interval or self._interval
      self._units = units or self._units
      self._repeating = repeating or self._repeating
    end

    if (self._interval > 0) then
      Dbg:Trace("Starting Timer: " .. self._name)
      self._id = C4:AddTimer(self._interval, self._units, self._repeating)
    end
  end

  function tt:KillTimer()
    if (self._id) then
      self._id = C4:KillTimer(self._id)
    end
  end

  function tt:TimerStarted()
    return (self._id ~= 0)
  end

  function tt:TimerStopped()
    return not self:TimerStarted()
  end

  gTimerLibTimers[tt._timerID] = tt
  Dbg:Trace("Created timer " .. tt._name)

  return tt
end

function TimerLibGetNextTimerID()
  gTimerLibTimerCurID = gTimerLibTimerCurID + 1
  return gTimerLibTimerCurID
end

function ON_DRIVER_EARLY_INIT.TimerLib()
  gTimerLibTimers = {}
  gTimerLibTimerCurID = 0
end

function ON_DRIVER_DESTROYED.TimerLib()
  -- Kill open timers
  for k,v in pairs(gTimerLibTimers) do
    v:KillTimer()
  end
end

--[[

  OnTimerExpired
    Function called by Director when the specified Control4 timer expires.
  Parameters
    idTimer
      Timer ID of expired timer.

--]]
function OnTimerExpired(idTimer)
  for k,v in pairs(gTimerLibTimers) do
    if (idTimer == v._id) then
      if (v._Callback) then
        v._Callback(v._info)
      end
    end
  end
end


------------------------------------------------------------------------
-- Below are driver common scripts. It's almost same to all serial-bus-controlled driver.
-- Will do below:
-- 1. First of all, declare several important status variable
-- 2. Add properties change handler
-- 3. Add "show status" command handler
-- 4. Add code for using or not using serial agent
-- 5. Add error message display method

local COMMON_CONSTANT = {
  COMM_WITH_SERIAL_AGENT = "comm-by-serial-agent",
  COMM_WITH_SERIAL_PORT = "comm-by-serial-port"
}
--- Serial communication address for current device
local deviceAddress
--- communication mode. 1- use serial-agent driver, 2- directly use serial port
local communicationMode
local serialAgentDevId = 1
local oldSerialAgentDevId = 1
--- print binary serial data package or not
local isDumpSerialData = false
--- buffer for framed receving-command strings
local recvFrameDatas = {}
--- framing timer
local framingTimer
local frameingTimerCnt = 0

--- action commond
function LUA_ACTION.ShowStatus()
  print("Device address  is " .. deviceAddress)
  print("Communication mode is " .. communicationMode)
  print("Serial Agent device ID is " .. serialAgentDevId)
  DriverLib.printProperties()
end

--- Common property on-change handlers
ON_PROPERTY_CHANGED["Use Serial Agent"] = function(propValue)
  if (propValue == "Yes") then
    communicationMode = COMMON_CONSTANT.COMM_WITH_SERIAL_AGENT
  else
    communicationMode = COMMON_CONSTANT.COMM_WITH_SERIAL_PORT
  end
  Dbg:Info("Set communication mode to "..(isDumpSerialData and "Yes" or "No"))
  RebindSerialAgent()
end

ON_PROPERTY_CHANGED["Address"] = function(propValue)
  deviceAddress = tonumber(propValue)
  Dbg:Info("Set device self serial communication address to "..deviceAddress)
end

ON_PROPERTY_CHANGED["Dump Serial Data"] = function(propValue)
  isDumpSerialData = propValue == "Yes"
  Dbg:Info("Set dump serial data to "..(isDumpSerialData and "Yes" or "No"))
end

ON_PROPERTY_CHANGED["Serial Agent Device ID"] = function(propValue)
  serialAgentDevId = tonumber(propValue)
  Dbg:Info("Serial agent used is "..serialAgentDevId)
  RebindSerialAgent()
end

ON_PROPERTY_CHANGED["Polling Seconds"] = function(propValue)
  if (pollingTimer) then
    pollingTimer:KillTimer()
  end

  local timeIntv = tonumber(propValue)
  if (timeIntv <= 0) then
    Dbg:Info("Illumination polling schedule is closed")
    return
  end

  pollingTimer = Timer:Create("polling timer", timeIntv, "SECONDS", pollingTask, true, "polling timer")
  pollingTimer:StartTimer()
  Dbg:Info(constants.ERROR_NO_ERROR)
end

--- Common functions for comminication
--- register with serial-agent variables
function RebindSerialAgent()
  C4:UnregisterVariableListener(oldSerialAgentDevId, 1002)
  Dbg:Info("Release old binded serial agent "..oldSerialAgentDevId)
  oldSerialAgentDevId = serialAgentDevId
  if (serialAgentDevId > 0 and communicationMode == COMMON_CONSTANT.COMM_WITH_SERIAL_AGENT) then
    C4:RegisterVariableListener(serialAgentDevId, 1002)
    Dbg:Info("Bind me to serial agent "..serialAgentDevId)
  end
end
--- hanlde serial-agent notification
function OnWatchedVariableChanged(idDevice, idVariable, strValue)
  Dbg:Debug({idDevice=idDevice, idVariable=idVariable, strValue=strValue})

  if (idDevice == serialAgentDevId and idVariable==1002 and communicationMode == COMMON_CONSTANT.COMM_WITH_SERIAL_AGENT) then
    OnRecieveFromSerialAgent(strValue)
  end
end

--- forward data received from serial-agent
function OnRecieveFromSerialAgent(strDataSeq)
  if (not strDataSeq) then
    return
  end
  local numDataSeq = tonumber(strDataSeq)
  if (not numDataSeq or numDataSeq < 1002) then
    return
  end
  local recvStr = C4:GetDeviceVariable(serialAgentDevId, numDataSeq)
  local strData = C4:Base64Decode(recvStr)
  if (isDumpSerialData) then
    print("\n\n\nReceive below data from serial agent:")
    hexdump(strData)
  end
  OnSerialDataReceived(strData)
end
--- handle data received from serial port
function ReceivedFromSerial(idBinding, strData)
  if strData == nil then
    return
  end
  if (communicationMode ~= COMMON_CONSTANT.COMM_WITH_SERIAL_PORT) then
    return
  end

  table.insert(recvStrDatas, strData)
  if (#strData < pieceSize) then
    frameingTimerCnt = 0
    handleFrameData()
  else
    frameingTimerCnt = 3
  end
end

function cutdownTimer()
  if (frameingTimerCnt == 0) then
    return
  end
  frameingTimerCnt = frameingTimerCnt - 1
  if (frameingTimerCnt <= 0) then
    handleFrameData()
  end
end

-- when found a whole piece frame data, send out the signal
function handleFrameData()
  local str = "";
  local len = #recvStrDatas
  if (len < 1) then
    return
  end

  for k=1,len do
    str =  str .. recvStrDatas[k]
  end
  recvStrDatas = {}

  if (isDumpSerialData) then
    print("\n\n\nReceive below data from serial port")
    hexdump(strData)
  end
  OnSerialDataReceived(strData)
end


function ON_DRIVER_INIT.driverCommonInit()
  framingTimer = Timer:Create("framing timer", 10, "MILLISECONDS", OnTestTimer, true, "framing timer")
  framingTimer:StartTimer()
  RebindSerialAgent()
  pollingTimer = Timer:Create("polling timer", 10, "SECONDS", readLumination, true, "polling timer")
  pollingTimer:StartTimer()
  regOutputVars()
end
----------------------------------------------------------------------------


function SendCommand(strData)

  if communicationMode == COMMON_CONSTANT.COMM_WITH_SERIAL_PORT then
    C4:SendToSerial(1, strData)
    if (isDumpSerialData) then
      print("\n\n\nSend below data to serial port")
      hexdump(strData)
    end
    return
  end

  local base64Str = C4:Base64Encode(strData)
  C4:SendToDevice(serialAgentDevId, "SendCommand", {strData=base64Str})
  if (isDumpSerialData) then
    print("Send below data to serial agent")
    hexdump(strData)
  end
end


----------------------------------------------------------------------------
DriverLib = {configData=nil}

function DriverLib.tableToString(tbl, prefix)
  local rstStr = "{"
  prefix = prefix or ""
  local keyTbl = {}
  for k,v in pairs(tbl) do
    table.insert(keyTbl,k)
  end
  table.sort(keyTbl)

  for i,k in pairs(keyTbl) do
    local v = tbl[k]
    if (type(v) == "table") then
      rstStr = rstStr .. prefix .. k .. DriverLib.tableToString(v, prefix .. "    ")
    else
      if (rstStr ~= "{") then
        rstStr = rstStr .. ", "
      end
      rstStr = rstStr .. prefix .. k .. "="
      if (type(v) == "string") then
        rstStr = rstStr .. "\"" .. tostring(v or "nil") .. "\""
      else
        rstStr = rstStr .. tostring(v or "nil")
      end
    end
  end
  return rstStr .. "}"
end
function DriverLib.sleep(timeSec)
  socket.select(nil, nil, timeSec)
end

function DriverLib.setConfig(data)
  DriverLib.configData = data
end

function DriverLib.postMsg(msg)
  C4:UpdateProperty("Error Message", msg)
  Dbg:Warn(msg)
end
function DriverLib.log(msg)
  Dbg:Info(msg)
end

function DriverLib.setList(info, propertyValue)
  if (info.propertyList == nil) then
    DriverLib.postMsg("[Error]: " .. info.displayName .. " has not defined List property")
    return
  end
  if (info.propertyList[propertyValue] == nil) then
    DriverLib.postMsg("[Error]: " .. info.displayName .. " has no value defined for " .. propertyValue .. " in the List")
    return
  end
  info.value = info.propertyList[propertyValue]
  DriverLib.log("[Log  ]: " .. info.displayName .. " set to " .. tostring(info.value))
end

function DriverLib.setNumber(info, propertyValue)
  info.value = tonumber(propertyValue)
end

function DriverLib.setString(info, propertyValue)
  info.value = tostring(propertyValue)
end

function DriverLib.readOnly(info, propertyValue)
  DriverLib.postMsg("[Error]: " .. info.displayName .. " is readonly")
end

function DriverLib.fireEvent(info, eventName)
  DriverLib.log("[EVENT OCCURRED]: " .. eventName)
  C4:FireEvent(eventName)
end

function DriverLib.updateProperty(info, value)
  DriverLib.log("Set " .. info.propertyName .. " to " .. tostring(value or "nil"))
  C4:UpdateProperty(info.propertyName, value)
  if (info.propertyList == nil) then
    info.value = value
    return
  end
  DriverLib.setList(info, value)
end

function DriverLib.onPropertyChanged(propName, propValue)
  for k,info in pairs(config.iodef) do
    if info.propertyName == propName then
      info.propertyHandler(info, propValue)
    end
  end
end

function DriverLib.printProperties()
  for k,info in pairs(DriverLib.configData.iodef) do
    print("The [" .. info.displayName .. "] is " .. tostring(info.value or "nil"))
  end
end

function DriverLib.get(name)
  return DriverLib.configData.iodef[name].value
end

function DriverLib.byte0 (data)
  return bit.band(data, 0xFF)
end

function DriverLib.byte1 (data)
  return bit.band(bit.rshift(data, 8), 0xFF)
end

function DriverLib.crc16 (buf, len)
  local crc = 0x0000ffff;
  len = len or #buf
  for byte=1, len do
    local curByte = string.byte(buf,byte,byte)
    crc = bit.band(bit.bxor(crc, curByte), 0xFFFF)
    for j=1,8,1 do
      local f = bit.band(crc, 1)
      crc = bit.band(bit.rshift(crc, 1), 0x7FFF)
      if (f > 0) then
        crc = bit.bxor(crc, 0xa001)
      end
    end
  end
  -- 485 CRC is low-byte first, high-byte then
  return string.char(DriverLib.byte0(crc))..string.char(DriverLib.byte1(crc))
end

function DriverLib.verifyCrc16 (strData, numLen)
  numLen = numLen or #strData
  local calcCrc = DriverLib.crc16(strData, numLen-2)
  local recvCrc = string.sub(strData, numLen-1,numLen)
  return calcCrc == recvCrc
end

function DriverLib.toUShort (strData)
  local rst = 0;
  local byte0, byte1 = string.byte(strData,1,2)
  return byte0 * 256 + byte1
end

function DriverLib.toShort (strData)
  local rst = DriverLib.toUShort(strData)
  if (rst > 0x7FFF) then
    return rst - 0x10000
  end
  return rst
end

config = {}
config.iodef = {
  Humidity = {
    displayName = "Humidity %",
    propertyName = "Humidity %",
    propertyHandler = DriverLib.readOnly,
    value=0,
  },
  HumiditySensibility = {
    displayName = "Humidity Sensibility",
    propertyName = "Humidity Sensibility",
    propertyHandler = DriverLib.setNumber,
    value=2,
  },
  HumidityAdjustment = {
    displayName = "Humidity Adjustment",
    propertyName = "Humidity Adjustment",
    propertyHandler = DriverLib.setNumber,
    value=0,
  },
  HasHumidityAlarm = {
    displayName = "Has Humidity Alarm",
    propertyName = "Has Humidity Alarm",
    propertyHandler = DriverLib.readOnly,
    value="NO",
  },
  HumidityLowAlarmEnable = {
    displayName = "Humidity Low Alarm Enable",
    propertyName = "Humidity Low Alarm Enable",
    propertyHandler = DriverLib.setList,
    propertyList = {
      ["Enable"] = true,
      ["Disable"] = false,
    },
    value="Enable",
  },
  HumidityHighAlarmEnable = {
    displayName = "Humidity High Alarm Enable",
    propertyName = "Humidity High Alarm Enable",
    propertyHandler = DriverLib.setList,
    propertyList = {
      ["Enable"] = true,
      ["Disable"] = false,
    },
    value="Enable",
  },
  HumidityHighAlarm = {
    displayName = "Humidity High Alarm",
    propertyName = "Humidity High Alarm",
    propertyHandler = DriverLib.setNumber,
    value=99.9,
  },
  HumidityLowAlarm = {
    displayName = "Humidity Low Alarm",
    propertyName = "Humidity Low Alarm",
    propertyHandler = DriverLib.setNumber,
    value=1,
  },
  TemperatureCelsius = {
    displayName = "Temperature Celsius",
    propertyName = "Temperature Celsius",
    propertyHandler = DriverLib.readOnly,
    value=0,
  },
  HasTemperatureAlarm = {
    displayName = "Has Temperature Alarm",
    propertyName = "Has Temperature Alarm",
    propertyHandler = DriverLib.readOnly,
    value="NO",
  },
  TemperatureSensibility = {
    displayName = "Temperature Sensibility",
    propertyName = "Temperature Sensibility",
    propertyHandler = DriverLib.setNumber,
    value=0.5,
  },
  TemperatureAdjustment = {
    displayName = "Temperature Adjustment",
    propertyName = "Temperature Adjustment",
    propertyHandler = DriverLib.setNumber,
    value=0,
  },
  TemperatureLowAlarmEnable = {
    displayName = "Temperature Low Alarm Enable",
    propertyName = "Temperature Low Alarm Enable",
    propertyHandler = DriverLib.setList,
    propertyList = {
      ["Enable"] = true,
      ["Disable"] = false,
    },
    value="Enable",
  },
  TemperatureHighAlarmEnable = {
    displayName = "Temperature High Alarm Enable",
    propertyName = "Temperature High Alarm Enable",
    propertyHandler = DriverLib.setList,
    propertyList = {
      ["Enable"] = true,
      ["Disable"] = false,
    },
    value="Enable",
  },
  TemperatureHighAlarm = {
    displayName = "Temperature High Alarm",
    propertyName = "Temperature High Alarm",
    propertyHandler = DriverLib.setNumber,
    value=80,
  },
  TemperatureLowAlarm = {
    displayName = "Temperature Low Alarm",
    propertyName = "Temperature Low Alarm",
    propertyHandler = DriverLib.setNumber,
    value=-40,
  },
  PollingSeconds = {
    displayName = "Polling Seconds",
    propertyName = "Polling Seconds",
    propertyHandler = DriverLib.setNumber,
    value=10,
  },
  DeviceTypeID = {
    displayName = "Device Type ID",
    propertyName = "Device Type ID",
    propertyHandler = DriverLib.readOnly,
    value=0,
  },
  Version = {
    displayName = "Version",
    propertyName = "Version",
    propertyHandler = DriverLib.readOnly,
    value=0,
  },
  DeviceID = {
    displayName = "Device ID",
    propertyName = "Device ID",
    propertyHandler = DriverLib.readOnly,
    value=0,
  }
}

----------------------------------------------------------------------------
-- Above codes are driver common scripts
-- Below is mine
----------------------------------------------------------------------------
-- below are examples you need to write by yourself
function OnSerialDataReceived(strData)
  -- TODO: this is the unified response-data-handling-enter-point
  -- Please add your own logical from here
  if (type(strData) ~= "string") then return end
  if (#strData < 4) then return end
  if (string.byte(strData,1,1) ~= deviceAddress) then return end
  handleCommandResponse(1, strData)
end




DriverLib.setConfig(config)
function pollingTask()
  doUpdateHumiture()
end
------------------------------------------------------------------------
-- below are driver scripts for your device, for example: smart switch
--- function LUA_ACTION.OpenGroup1()
--- function EX_CMD.SetRelay(tParams)
function LUA_ACTION.GetAlarmSettings()
  sendOneCommand('cmdReadBatch', {deviceAddress, 8, constants.ADDR_TEMP_ALERT_UPPER})
  DriverLib.postMsg(constants.ERROR_NO_ERROR)
end
function LUA_ACTION.GetAdjustmentSettings()
  sendOneCommand('cmdReadBatch', {deviceAddress, 2, constants.ADDR_TEMP_ADJUST})
  DriverLib.postMsg(constants.ERROR_NO_ERROR)
end
function LUA_ACTION.GetDeviceInfo()
  sendOneCommand('cmdReadBatch', {deviceAddress, 4, constants.ADDR_DEVICE_TYPE})
  DriverLib.postMsg(constants.ERROR_NO_ERROR)
end
function LUA_ACTION.ChangeHumidityAlarmSettings()
  local tParams = {
    lowAlarmEnable = DriverLib.get("HumidityLowAlarmEnable"),
    lowAlarmLimit = DriverLib.get("HumidityLowAlarm"),
    highAlarmEnable=DriverLib.get("HumidityHighAlarmEnable"),
    highAlarmLimit=DriverLib.get("HumidityHighAlarm"),
  }
  DriverLib.postMsg(doSetAlarmSetting(constants.ADDR_HUMI_ALERT_UPPER, tParams))
end
function LUA_ACTION.ChangeTemperatureAlarmSettings()
  local tParams = {
    lowAlarmEnable = DriverLib.get("TemperatureLowAlarmEnable"),
    lowAlarmLimit = DriverLib.get("TemperatureLowAlarm"),
    highAlarmEnable=DriverLib.get("TemperatureHighAlarmEnable"),
    highAlarmLimit=DriverLib.get("TemperatureHighAlarm"),
  }
  DriverLib.postMsg(doSetAlarmSetting(constants.ADDR_TEMP_ALERT_UPPER, tParams))
end
function LUA_ACTION.ChangeHumidityAdjustmentSettings()
  sendOneCommand('cmdSetTempretureAdjust', {deviceAddress, 1, constants.ADDR_HUMI_ADJUST, DriverLib.get("HumidityAdjustment")*scale})
  DriverLib.postMsg(constants.ERROR_NO_ERROR)
end
function LUA_ACTION.ChangeTemperatureAdjustmentSettings()
  sendOneCommand('cmdSetTempretureAdjust', {deviceAddress, 1, constants.ADDR_TEMP_ADJUST, DriverLib.get("TemperatureAdjustment")*scale})
  DriverLib.postMsg(constants.ERROR_NO_ERROR)
end
function LUA_ACTION.UpdateHumiture()
  DriverLib.postMsg(doUpdateHumiture())
end

-------------------------------------------------------------------------------
--- below are data handling

-- below line is commented out for simulator, should use it in real driver
-- DriverLib.handleReceivedFromSerial = function() end
-- this is for simulator, should be remove in real driver

scale = 10.0
constants = {
  CMD_READ = 0x03,
  CMD_WRITE = 0x10,

  ADDR_DEVICE_ID_HIGH = 0x0A,
  ADDR_DEVICE_ID = 0x0B,
  ADDR_HUMIDITY = 0x00,
  ADDR_TEMPRETURE = 0x01,
  ADDR_DEVICE_TYPE = 0x08,
  ADDR_VERSION = 0x09,
  ADDR_TEMP_ALERT_UPPER = 0x0C,
  ADDR_TEMP_ALERT_HI_ENABLE = 0x0D,
  ADDR_TEMP_ALERT_LOWER = 0x0E,
  ADDR_TEMP_ALERT_LO_ENABLE = 0x0F,
  ADDR_HUMI_ALERT_UPPER = 0x10,
  ADDR_HUMI_ALERT_HI_ENABLE = 0x11,
  ADDR_HUMI_ALERT_LOWER = 0x12,
  ADDR_HUMI_ALERT_LO_ENABLE = 0x13,
  ADDR_TEMP_ADJUST = 0x1D,
  ADDR_HUMI_ADJUST = 0x1E,

  ERROR_FUNCTION_CODE = 0x81,
  ERROR_READ_ADDRESS = 0x82,
  ERROR_WRITE_OPERATION = 0x83,

  ERROR_NO_ERROR = "SUCCESS",
  ERROR_NO_RESPONSE = "NO RESPONSE",
  ERROR_NO_DATA = "NO DATA",
  ERROR_NIL_DATA = "NIL DATA",
  ERROR_RESPONSE_ERRROR = "ERROR",
  ERROR_INVALID_RESPONSE = "INVALID RESPONSE",
  ERROR_RESPONSE_REG_NUM = "WRONG RESPONSE REGISTER NUMBER",
  ERROR_CRC_ERROR = "CRC ERROR"
}

local regNames = {
  [constants.ADDR_DEVICE_ID_HIGH] = "Device ID HI",
  [constants.ADDR_DEVICE_ID] = "Device ID",
  [constants.ADDR_HUMIDITY] = "Humidity",
  [constants.ADDR_TEMPRETURE] = "TemperatureCelsius",
  [constants.ADDR_DEVICE_TYPE] = "DeviceTypeID",
  [constants.ADDR_VERSION] = "Version",
  [constants.ADDR_TEMP_ALERT_UPPER] = "TemperatureHighAlarm",
  [constants.ADDR_TEMP_ALERT_HI_ENABLE] = "TemperatureHighAlarmEnable",
  [constants.ADDR_TEMP_ALERT_LOWER] = "TemperatureLowAlarm",
  [constants.ADDR_TEMP_ALERT_LO_ENABLE] = "TemperatureLowAlarmEnable",
  [constants.ADDR_HUMI_ALERT_UPPER] = "HumidityHighAlarm",
  [constants.ADDR_HUMI_ALERT_HI_ENABLE] = "HumidityHighAlarmEnable",
  [constants.ADDR_HUMI_ALERT_LOWER] = "HumidityLowAlarm",
  [constants.ADDR_HUMI_ALERT_LO_ENABLE] = "HumidityLowAlarmEnable",
  [constants.ADDR_TEMP_ADJUST] = "TemperatureAdjustment",
  [constants.ADDR_HUMI_ADJUST] = "HumidityAdjustment",
}

local outputVarNames = {
  [constants.ADDR_HUMIDITY] = "Humidity",
  [constants.ADDR_TEMPRETURE] = "TemperatureCelsius",
  [constants.ADDR_DEVICE_TYPE] = "DeviceTypeID",
  [constants.ADDR_VERSION] = "Version",
  [constants.ADDR_TEMP_ALERT_UPPER] = "TemperatureHighAlarm",
  [constants.ADDR_TEMP_ALERT_HI_ENABLE] = "TemperatureHighAlarmEnable",
  [constants.ADDR_TEMP_ALERT_LOWER] = "TemperatureLowAlarm",
  [constants.ADDR_TEMP_ALERT_LO_ENABLE] = "TemperatureLowAlarmEnable",
  [constants.ADDR_HUMI_ALERT_UPPER] = "HumidityHighAlarm",
  [constants.ADDR_HUMI_ALERT_HI_ENABLE] = "HumidityHighAlarmEnable",
  [constants.ADDR_HUMI_ALERT_LOWER] = "HumidityLowAlarm",
  [constants.ADDR_HUMI_ALERT_LO_ENABLE] = "HumidityLowAlarmEnable",
  [constants.ADDR_TEMP_ADJUST] = "TemperatureAdjustment",
  [constants.ADDR_HUMI_ADJUST] = "HumidityAdjustment",
}
local outputVarValues = {}

function regOutputVars()
  local keySet = {}
  for addr,name in pairs(outputVarNames) do
    table.insert(keySet,addr)
  end
  table.sort(keySet)
  for i=1,#keySet do
    local addr = keySet[i]
    local name = outputVarNames[addr]
    C4:AddVariable(name,0,"NUMBER")
  end
end

function updateOutputVars(data, regAddr)
  if outputVarNames[regAddr] == nil then return end
  local value = data[regAddr]
  if value == nil then return end
  if outputVarValues[regAddr] == nil then
    outputVarValues[regAddr] = 0x10000
  end
  
  if outputVarValues[regAddr] == value then return end
  outputVarValues[regAddr] = value
  C4:SetVariable(outputVarNames[regAddr],value)
end

function getDataParser()
  local result = { errorState = constants.ERROR_NO_ERROR }
  local dataParser = {
    [constants.ADDR_DEVICE_ID_HIGH] = function(data) result[constants.ADDR_DEVICE_ID_HIGH] = DriverLib.toUShort(data) end,
    [constants.ADDR_DEVICE_ID] = function(data) result[constants.ADDR_DEVICE_ID] = DriverLib.toUShort(data) end,
    [constants.ADDR_HUMIDITY] = function(data) result[constants.ADDR_HUMIDITY] = DriverLib.toShort(data)/scale end,
    [constants.ADDR_TEMPRETURE] = function(data) result[constants.ADDR_TEMPRETURE] = DriverLib.toShort(data)/scale end,
    [constants.ADDR_DEVICE_TYPE] = function(data) result[constants.ADDR_DEVICE_TYPE] = DriverLib.toUShort(data) end,
    [constants.ADDR_VERSION] = function(data) result[constants.ADDR_VERSION] = DriverLib.toUShort(data) end,
    [constants.ADDR_TEMP_ALERT_UPPER] = function(data) result[constants.ADDR_TEMP_ALERT_UPPER] = DriverLib.toShort(data)/scale end,
    [constants.ADDR_TEMP_ALERT_HI_ENABLE] = function(data) result[constants.ADDR_TEMP_ALERT_HI_ENABLE] = DriverLib.toUShort(data) end,
    [constants.ADDR_TEMP_ALERT_LOWER] = function(data) result[constants.ADDR_TEMP_ALERT_LOWER] = DriverLib.toShort(data)/scale end,
    [constants.ADDR_TEMP_ALERT_LO_ENABLE] = function(data) result[constants.ADDR_TEMP_ALERT_LO_ENABLE] = DriverLib.toUShort(data) end,
    [constants.ADDR_HUMI_ALERT_UPPER] = function(data) result[constants.ADDR_HUMI_ALERT_UPPER] = DriverLib.toShort(data)/scale end,
    [constants.ADDR_HUMI_ALERT_HI_ENABLE] = function(data) result[constants.ADDR_HUMI_ALERT_HI_ENABLE] = DriverLib.toUShort(data) end,
    [constants.ADDR_HUMI_ALERT_LOWER] = function(data) result[constants.ADDR_HUMI_ALERT_LOWER] = DriverLib.toShort(data)/scale end,
    [constants.ADDR_HUMI_ALERT_LO_ENABLE] = function(data) result[constants.ADDR_HUMI_ALERT_LO_ENABLE] = DriverLib.toUShort(data) end,
    [constants.ADDR_TEMP_ADJUST] = function(data) result[constants.ADDR_TEMP_ADJUST] = DriverLib.toShort(data)/scale end,
    [constants.ADDR_HUMI_ADJUST] = function(data) result[constants.ADDR_HUMI_ADJUST] = DriverLib.toShort(data)/scale end
  }
  local function parseData(tgtAddr, strData)
    if (type(dataParser[tgtAddr]) == "function") then
      dataParser[tgtAddr](strData)
    end
    return result
  end
  return parseData
end

function verifyResponse(deviceId, cmdCode, strData, minLen)
  local result = {errorState=constants.ERROR_NO_ERROR}
  --hexdump(strData)
  -- response length verification
  if (#strData ~=4 and #strData < minLen) then
    result.errorState=constants.ERROR_INVALID_RESPONSE
    return result
  end

  -- response device ID verification
  if (string.byte(strData,1,1) ~= deviceId) then
    result.errorState = constants.ERROR_INVALID_RESPONSE
    return result
  end

  -- CRC verification
  local crcOK = DriverLib.verifyCrc16(strData)
  if (not crcOK) then
    result.errorState=constants.ERROR_CRC_ERROR
    return result
  end

  -- response code verification
  if (string.byte(strData,2,2) ~= cmdCode) then
    result.errorState=constants.ERROR_INVALID_RESPONSE
    result.errorCode = string.byte(strData,2,2)
    return result
  end
  return result
end

-------------------------------------------------------------------------
-- ??????, tParams ???
--  1=????? 2=????????? 3=??????????
-------------------------------------------------------------------------
function makeReadCommand(tParams)
  local cmd = string.format("%02X %02X %02X %02X %02X %02X",tParams[1], constants.CMD_READ,
    DriverLib.byte1(tParams[3]), DriverLib.byte0(tParams[3]),
    DriverLib.byte1(tParams[2]), DriverLib.byte0(tParams[2]))
  return cmd
end
-- ????
function handleReadResponse(idBinding, strData, tParams)
  --    hexdump(strData)
  local result = verifyResponse(tParams[1], constants.CMD_READ, strData, 7)
  if (result.errorState ~= constants.ERROR_NO_ERROR) then
    return result
  end

  -- response register number verification
  local dataLen = string.byte(strData,3,3)/2
  if (dataLen ~= tParams[2]) then
    result.errorState = constants.ERROR_RESPONSE_REG_NUM
    return result
  end

  local parser = getDataParser()
  local addr = tParams[3]
  for offset=0,dataLen-1,1 do
    result = parser(addr+offset, string.sub(strData,4+offset*2,5+offset*2))
  end
  return result
end

-------------------------------------------------------------------------
-- ??????, tParams ???
--  1=????? 2=????????? 3=??????????? 4... ??
-------------------------------------------------------------------------
function makeWriteCommand(tParams)
  local cmd = string.format("%02X %02X %02X %02X %02X %02X %02X",
    tParams[1], constants.CMD_WRITE,
    DriverLib.byte1(tParams[3]), DriverLib.byte0(tParams[3]),
    DriverLib.byte1(tParams[2]), DriverLib.byte0(tParams[2]), tParams[2]*2)
  if (#tParams < (tParams[2] + 3)) then
    print ("input values are not correct")
    return nil
  end
  for i=4, #tParams do
    cmd = cmd .. string.format(" %02X %02X", DriverLib.byte1(tParams[i]), DriverLib.byte0(tParams[i]))
  end
  return cmd
end

function handleWriteResponse(idBinding, strData, tParams)
  local result = verifyResponse(tParams[1], constants.CMD_WRITE, strData, 8)
  if (result.errorState ~= constants.ERROR_NO_ERROR) then
    return result
  end

  -- response register number verification
  if (string.byte(strData,6,6) ~= tParams[2]) then
    result.errorState=constants.ERROR_RESPONSE_REG_NUM
    return result
  end

  return result
end


function getReadCmdInfo(tVarCodes)
  local cmdInfo = {
    variable = {},
    command = makeReadCommand,
    responseHandler = handleReadResponse
  }
  for pos, code in pairs(tVarCodes) do
    cmdInfo.variable[code] = regNames[code]
  end
  return cmdInfo
end

function getWriteCmdInfo()
  return {command = makeWriteCommand, responseHandler = handleWriteResponse}
end

local cmdManager = {
  commandCode = nil,
  commandParams = nil,
  cmdReadHumidity = getReadCmdInfo({constants.ADDR_HUMIDITY}),
  cmdReadTempreture = getReadCmdInfo({constants.ADDR_TEMPRETURE}),
  cmdReadHumiture = getReadCmdInfo({constants.ADDR_HUMIDITY, constants.ADDR_TEMPRETURE}),
  cmdReadDeviceType = getReadCmdInfo({constants.ADDR_DEVICE_TYPE}),
  cmdReadVersion = getReadCmdInfo({constants.ADDR_VERSION}),
  cmdReadTempretureAlarmUpper = getReadCmdInfo({constants.ADDR_TEMP_ALERT_UPPER}),
  cmdReadTempretureAlarmLower = getReadCmdInfo({constants.ADDR_TEMP_ALERT_LOWER}),
  cmdReadTempretureHighAlarmEnable = getReadCmdInfo({constants.ADDR_TEMP_ALERT_HI_ENABLE}),
  cmdReadTempretureLowAlarmEnable = getReadCmdInfo({constants.ADDR_TEMP_ALERT_LO_ENABLE}),
  cmdReadHumidityAlarmUpper = getReadCmdInfo({constants.ADDR_HUMI_ALERT_UPPER}),
  cmdReadHumidityAlarmLower = getReadCmdInfo({constants.ADDR_HUMI_ALERT_LOWER}),
  cmdReadHumidityHighAlarmEnable = getReadCmdInfo({constants.ADDR_HUMI_ALERT_HI_ENABLE}),
  cmdReadHumidityLowAlarmEnable = getReadCmdInfo({constants.ADDR_HUMI_ALERT_LO_ENABLE}),
  cmdReadTempretureAdjust = getReadCmdInfo({constants.ADDR_TEMP_ADJUST}),
  cmdReadHumidityAdjust = getReadCmdInfo({constants.ADDR_HUMI_ADJUST}),
  cmdReadDeviceIdHigh = getReadCmdInfo({constants.ADDR_DEVICE_ID_HIGH}),
  cmdReadDeviceIdLow = getReadCmdInfo({constants.ADDR_DEVICE_ID}),
  cmdReadBatch = getReadCmdInfo({constants.ADDR_HUMIDITY, constants.ADDR_TEMPRETURE, constants.ADDR_DEVICE_TYPE,
    constants.ADDR_VERSION, constants.ADDR_TEMP_ALERT_UPPER, constants.ADDR_TEMP_ALERT_LOWER,
    constants.ADDR_TEMP_ALERT_HI_ENABLE, constants.ADDR_TEMP_ALERT_LO_ENABLE, constants.ADDR_HUMI_ALERT_UPPER,
    constants.ADDR_HUMI_ALERT_LOWER, constants.ADDR_HUMI_ALERT_HI_ENABLE, constants.ADDR_HUMI_ALERT_LO_ENABLE,
    constants.ADDR_TEMP_ADJUST, constants.ADDR_HUMI_ADJUST,  constants.ADDR_DEVICE_ID_HIGH, constants.ADDR_DEVICE_ID}),
  cmdSetTempretureAlarmUpper = getWriteCmdInfo(),
  cmdSetTempretureAlarmLower = getWriteCmdInfo(),
  cmdSetTempretureHighAlarmEnable = getWriteCmdInfo(),
  cmdSetTempretureLowAlarmEnable = getWriteCmdInfo(),
  cmdSetHumidityAlarmUpper = getWriteCmdInfo(),
  cmdSetHumidityAlarmLower = getWriteCmdInfo(),
  cmdSetHumidityHighAlarmEnable = getWriteCmdInfo(),
  cmdSetHumidityLowAlarmEnable = getWriteCmdInfo(),
  cmdSetTempretureAdjust = getWriteCmdInfo(),
  cmdSetHumidityAdjust = getWriteCmdInfo(),
  cmdSetBatch = getWriteCmdInfo()
}

function sendOneCommand(code, tParams)
  local cmdInfo = cmdManager[code]
  cmdManager.commandCode = code
  cmdManager.commandParams = tParams
  local cmdStr = cmdInfo.command(tParams)
  local crcCmd = tohex(cmdStr)
  crcCmd = crcCmd .. DriverLib.crc16(crcCmd)
  SendCommand(crcCmd)
end

function handleCommandResponse(idBinding, strData)
  if (not cmdManager.commandCode) then
    print("nothing required by me, skip")
    return
  end

  -- debug
  -- print("handling command " .. cmdManager.commandCode)
  local cmdInfo = cmdManager[cmdManager.commandCode]
  local params = cmdManager.commandParams
  cmdManager.commandCode = nil
  cmdManager.commandParams = nil
  local result = cmdInfo.responseHandler(idBinding, strData, params)

  if (result.errorState ~= constants.ERROR_NO_ERROR) then
    local msg = "has error ".. result.errorState .. " with code " .. string.format("0x%02X", (result.errorCode or 0))
    print (msg)
    DriverLib.postMsg(msg)
    return
  end

  updatePropertiesWithResult(result)
end

function setProperty(name, value)
  local info = config.iodef[name]
  DriverLib.updateProperty(info, value)
end
function simpleHandler(result, regAddr)
  local name = regNames[regAddr]
  if name == nil then return end
  local info = config.iodef[name]
  DriverLib.updateProperty(info, result[regAddr])
  updateOutputVars(result, regAddr)
end
function simpleHandlerForEnable(result, regAddr)
  local name = regNames[regAddr]
  if name == nil then return end
  local info = config.iodef[name]
  DriverLib.updateProperty(info, result[regAddr] and "Enable" or "Disable")
  updateOutputVars(result, regAddr)
end
function handleAlarm(newValue, propEnable, propLimit, checkHigher, eventName)
  local pEn = DriverLib.get(propEnable)
  if not pEn then return false end
  local pLmt = DriverLib.get(propLimit)
  if checkHigher == (pLmt > newValue) then
    return false
  end
  DriverLib.fireEvent(nil, eventName)
  return true
end

local oldTemperature,oldHumidity

local dataHandler = {
  [constants.ADDR_DEVICE_ID_HIGH] = function(data, regAddr)
    setProperty("DeviceID", string.format("%02X %02X", data[constants.ADDR_DEVICE_ID_HIGH], data[constants.ADDR_DEVICE_ID] or 0))
    updateOutputVars(data, regAddr)
  end,
  [constants.ADDR_DEVICE_ID] = function(data, regAddr)
    setProperty("DeviceID", string.format("%02X %02X", data[constants.ADDR_DEVICE_ID_HIGH] or 0, data[constants.ADDR_DEVICE_ID]))
    updateOutputVars(data, regAddr)
  end,
  [constants.ADDR_HUMIDITY] = function(data, regAddr)
    local newValue = data[regAddr]
    setProperty("Humidity", newValue)
    local hasAlarm = handleAlarm(newValue, "HumidityLowAlarmEnable", "HumidityLowAlarm", false, "Humidity Low Alarm")
    if (hasAlarm) then
      setProperty("HasHumidityAlarm", "Humdity too low")
    else
      hasAlarm = handleAlarm(newValue, "HumidityHighAlarmEnable", "HumidityHighAlarm", true, "Humidity High Alarm")
      if (hasAlarm) then
        setProperty("HasHumidityAlarm", "Humidity too high")
      else
        setProperty("HasHumidityAlarm", "No alarm")
      end
    end
    local oldValue = oldHumidity
    
    if oldValue == nil then oldHumidity = newValue return end
    local deltaRange = DriverLib.get("HumiditySensibility")
    if math.abs(oldValue - newValue) > deltaRange then
      DriverLib.fireEvent(nil, "Humidity Changed")
      oldHumidity = newValue
    end
    updateOutputVars(data, regAddr)
  end,
  [constants.ADDR_TEMPRETURE] = function(data, regAddr)
    local newValue = data[regAddr]
    setProperty("TemperatureCelsius", newValue)
    local hasAlarm = handleAlarm(newValue, "TemperatureLowAlarmEnable", "TemperatureLowAlarm", false, "Temperature Low Alarm")
    if (hasAlarm) then
      setProperty("HasTemperatureAlarm", "Temperature too low")
    else
      hasAlarm = handleAlarm(newValue, "TemperatureHighAlarmEnable", "TemperatureHighAlarm", true, "Temperature High Alarm")
      if (hasAlarm) then
        setProperty("HasTemperatureAlarm", "Temperature too high")
      else
        setProperty("HasTemperatureAlarm", "No alarm")
      end
    end
    local oldValue = oldTemperature
    
    if oldValue == nil then oldTemperature = newValue return end
    local deltaRange = DriverLib.get("TemperatureSensibility")
    if math.abs(oldValue - newValue) > deltaRange then
      DriverLib.fireEvent(nil, "Temperature Changed")
      oldTemperature = newValue
    end
    updateOutputVars(data, regAddr)
  end,
  [constants.ADDR_DEVICE_TYPE] = simpleHandler,
  [constants.ADDR_VERSION] = simpleHandler,
  [constants.ADDR_TEMP_ALERT_UPPER] = simpleHandler,
  [constants.ADDR_TEMP_ALERT_HI_ENABLE] = simpleHandlerForEnable,
  [constants.ADDR_TEMP_ALERT_LOWER] = simpleHandler,
  [constants.ADDR_TEMP_ALERT_LO_ENABLE] = simpleHandlerForEnable,
  [constants.ADDR_HUMI_ALERT_UPPER] = simpleHandler,
  [constants.ADDR_HUMI_ALERT_HI_ENABLE] = simpleHandlerForEnable,
  [constants.ADDR_HUMI_ALERT_LOWER] = simpleHandler,
  [constants.ADDR_HUMI_ALERT_LO_ENABLE] = simpleHandlerForEnable,
  [constants.ADDR_TEMP_ADJUST] = simpleHandler,
  [constants.ADDR_HUMI_ADJUST] = simpleHandler,
}
function updatePropertiesWithResult(result)
  PrintTable(result)
  for addr,value in pairs(result) do
    local handleFunc = dataHandler[addr]
    if handleFunc then
      handleFunc(result, addr)
    end
  end
end
-------------------------------------------------------------
-- below are interface for actions
function doUpdateHumiture()
  sendOneCommand('cmdReadBatch', {deviceAddress, 2, constants.ADDR_HUMIDITY})
  return constants.ERROR_NO_ERROR
end

function doSetAlarmSetting(regAddr, tParams)
  PrintTable(tParams)
  if (tParams.lowAlarmEnable and tParams.highAlarmEnable) then
    if tParams.lowAlarmLimit >= tParams.highAlarmLimit then
      return "Low limit not lower than high limit"
    end
  end
  sendOneCommand('cmdSetBatch', {deviceAddress, 4,
    regAddr,
    tParams.highAlarmLimit * scale,
    tParams.highAlarmEnable and 1 or 0,
    tParams.lowAlarmLimit * scale,
    tParams.lowAlarmEnable and 1 or 0,
  })
  return constants.ERROR_NO_ERROR
end

function EX_CMD.WhoAmI(tParams)
  local resp = {
	  deviceId = C4:GetDeviceID(),
	  profile = "AW1485A"
  }
  C4:SendToDevice(tParams.deviceId, "UpdateProfile", resp)
end

]]></script>
        <actions>
            <action>
                <name>Change Temperature Alarm Settings</name>
                <command>ChangeTemperatureAlarmSettings</command>
            </action>
            <action>
                <name>Change Humidity Alarm Settings</name>
                <command>ChangeHumidityAlarmSettings</command>
            </action>
            <action>
                <name>Get Alarm Settings</name>
                <command>GetAlarmSettings</command>
            </action>
            <action>
                <name>Change Temperature Adjustment Settings</name>
                <command>ChangeTemperatureAdjustmentSettings</command>
            </action>
            <action>
                <name>Change Humidity Adjustment Settings</name>
                <command>ChangeHumidityAdjustmentSettings</command>
            </action>
            <action>
                <name>Get Adjustment Settings</name>
                <command>GetAdjustmentSettings</command>
            </action>
            <action>
                <name>Get Device Info</name>
                <command>GetDeviceInfo</command>
            </action>
            <action>
                <name>Update Humiture</name>
                <command>UpdateHumiture</command>
            </action>
            <action>
                <name>Show Status</name>
                <command>ShowStatus</command>
            </action>
        </actions>
        <properties>
            <property>
                <name>Debug Level</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>2 - Warning</default>
                <items>
                    <item>0 - Alert</item>
                    <item>1 - Error</item>
                    <item>2 - Warning</item>
                    <item>3 - Info</item>
                    <item>4 - Trace</item>
                    <item>5 - Debug</item>
                </items>
            </property>
            <property>
                <name>Debug Mode</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Off</default>
                <items>
                    <item>Off</item>
                    <item>Print</item>
                    <item>Log</item>
                    <item>Print and Log</item>
                </items>
            </property>
            <property>
                <name>Address</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>10</default>
                <minimum>1</minimum>
                <maximum>255</maximum>
            </property>
            <property>
                <name>Use Serial Agent</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Yes</default>
                <items>
                    <item>Yes</item>
                    <item>No</item>
                </items>
            </property>
            <property>
                <name>Serial Agent Device ID</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>1</default>
                <minimum>0</minimum>
                <maximum>65535</maximum>
            </property>
            <property>
                <name>Dump Serial Data</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default />
                <items>
                    <item>Yes</item>
                    <item>No</item>
                </items>
            </property>
            <property>
                <name>Error Message</name>
                <type>STRING</type>
                <readonly>true</readonly>
                <default>SUCCESS</default>
            </property>
            <property>
                <name>Humidity %</name>
                <type>RANGED_FLOAT</type>
                <readonly>true</readonly>
                <default>0</default>
                <minimum>0</minimum>
                <maximum>100</maximum>
            </property>
            <property>
                <name>Has Humidity Alarm</name>
                <type>STRING</type>
                <readonly>true</readonly>
                <default>No Alarm</default>
            </property>
            <property>
                <name>Humidity Sensibility</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>2</default>
                <minimum>0</minimum>
                <maximum>99.9</maximum>
            </property>
            <property>
                <name>Humidity Adjustment</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>0</default>
                <minimum>-10</minimum>
                <maximum>10</maximum>
            </property>
            <property>
                <name>Humidity High Alarm</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>99.9</default>
                <minimum>1</minimum>
                <maximum>99.9</maximum>
            </property>
            <property>
                <name>Humidity High Alarm Enable</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Enable</default>
                <items>
                    <item>Enable</item>
                    <item>Disable</item>
                </items>
            </property>
            <property>
                <name>Humidity Low Alarm</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>1</default>
                <minimum>1</minimum>
                <maximum>99.9</maximum>
            </property>
            <property>
                <name>Humidity Low Alarm Enable</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Enable</default>
                <items>
                    <item>Enable</item>
                    <item>Disable</item>
                </items>
            </property>
            <property>
                <name>Temperature Celsius</name>
                <type>RANGED_FLOAT</type>
                <readonly>true</readonly>
                <default>0</default>
                <minimum>-40</minimum>
                <maximum>80</maximum>
            </property>
            <property>
                <name>Has Temperature Alarm</name>
                <type>STRING</type>
                <readonly>true</readonly>
                <default>No Alarm</default>
            </property>
            <property>
                <name>Temperature Sensibility</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>0.5</default>
                <minimum>0</minimum>
                <maximum>99.9</maximum>
            </property>
            <property>
                <name>Temperature Adjustment</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>0</default>
                <minimum>-10</minimum>
                <maximum>10</maximum>
            </property>
            <property>
                <name>Temperature High Alarm</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>80</default>
                <minimum>-40</minimum>
                <maximum>80</maximum>
            </property>
            <property>
                <name>Temperature High Alarm Enable</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Enable</default>
                <items>
                    <item>Enable</item>
                    <item>Disable</item>
                </items>
            </property>
            <property>
                <name>Temperature Low Alarm</name>
                <type>RANGED_FLOAT</type>
                <readonly>false</readonly>
                <default>-40</default>
                <minimum>-40</minimum>
                <maximum>80</maximum>
            </property>
            <property>
                <name>Temperature Low Alarm Enable</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Enable</default>
                <items>
                    <item>Enable</item>
                    <item>Disable</item>
                </items>
            </property>
            <property>
                <name>Polling Seconds</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>10</default>
                <minimum>0</minimum>
                <maximum>86400</maximum>
            </property>
            <property>
                <name>Device Type ID</name>
                <type>RANGED_INTEGER</type>
                <readonly>true</readonly>
                <default>0</default>
                <minimum>0</minimum>
                <maximum>65535</maximum>
            </property>
            <property>
                <name>Version</name>
                <type>RANGED_INTEGER</type>
                <readonly>true</readonly>
                <default>0</default>
                <minimum>0</minimum>
                <maximum>65535</maximum>
            </property>
            <property>
                <name>Device ID</name>
                <type>STRING</type>
                <readonly>true</readonly>
                <default />
            </property>
        </properties>
    </config>
    <events>
        <event>
            <id>1</id>
            <name>Humidity Changed</name>
            <description>Humidity Changed from NAME</description>
        </event>
        <event>
            <id>2</id>
            <name>Humidity Low Alarm</name>
            <description>Humidity Low Alarm from NAME</description>
        </event>
        <event>
            <id>3</id>
            <name>Humidity High Alarm</name>
            <description>Humidity High Alarm From NAME</description>
        </event>
        <event>
            <id>4</id>
            <name>Temperature Changed</name>
            <description>Temperature Changed from NAME</description>
        </event>
        <event>
            <id>5</id>
            <name>Temperature Low Alarm</name>
            <description>Temperature Low Alarm from NAME</description>
        </event>
        <event>
            <id>6</id>
            <name>Temperature High Alarm</name>
            <description>Temperature High Alarm from NAME</description>
        </event>
    </events>
</devicedata>