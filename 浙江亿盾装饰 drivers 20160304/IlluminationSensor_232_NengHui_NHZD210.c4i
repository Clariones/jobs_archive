<devicedata>
    <copyright>Copyright 2004-2008 Control4 Corporation.  All rights reserved.</copyright>
    <creator>SkyNet</creator>
    <manufacturer>NengHui</manufacturer>
    <name>Illumination Sensor NHDZ210</name>
    <model>NHDZ210</model>
    <created>12/30/2015 2:13 PM</created>
    <modified>12/31/2015 2:36 PM</modified>
    <version>10</version>
    <small>devices_sm\c4.gif</small>
    <large>devices_lg\c4.gif</large>
    <control>lua_gen</control>
    <controlmethod>serial</controlmethod>
    <driver>DriverWorks</driver>
    <search_type>SkyNet</search_type>
    <combo>True</combo>
    <OnlineCategory>others</OnlineCategory>
    <proxies qty="1">
        <proxy>IlluminationSensor_232_NengHui_NHZD210</proxy>
    </proxies>
    <connections>
        <connection>
            <id>1</id>
            <facing>6</facing>
            <connectionname>Serial RS-232</connectionname>
            <type>1</type>
            <consumer>True</consumer>
            <audiosource>False</audiosource>
            <videosource>False</videosource>
            <linelevel>False</linelevel>
            <classes>
                <class>
                    <classname>RS_232</classname>
                </class>
            </classes>
        </connection>
		<connection>
            <id>2</id>
            <facing>1</facing>
            <connectionname>DATA_PROXY</connectionname>
            <type>1</type>
            <consumer>True</consumer>
            <audiosource>False</audiosource>
            <videosource>False</videosource>
            <linelevel>True</linelevel>
            <classes>
                <class>
                    <classname>DATA_PROXY</classname>
                    <autobind>True</autobind>
                </class>
            </classes>
        </connection>
    </connections>
    <config>
        <identify_text>IlliminationSensor_232_NengHui_NHZD210</identify_text>
        <power_management_method>AlwaysOn</power_management_method>
        <power_command_delay>0</power_command_delay>
        <power_delay>0</power_delay>
        <power_command_needed>False</power_command_needed>
        <serialsettings>9600 8 none 1 none </serialsettings>
        <documentation>Notes:
	1. How to change device address.

	Device address is very important. So we need server special steps to achieve this.
	First, you must set the value of property "Change Address To"
	Next, you need input a correct message in property "Change Address Request".
		for example, if you set the new address to 32, then
		if you want to change the address by the normal command, which use its own address, you should input
			"Please change me to 32"
		if you want to change the address by broadcast, which use 00 address to broadcast, you should input
			"Please change address to 32"
	These messages will be prompt in Change Address Request", you can easy to get it. But you must input some thing manully.


	2. How to change baud rate

	We don't provide directly interface to change the baud rate. Because it has no individual serial-driven in most case.
	But you still can do this by input command in lua command pannel:
		setBaudRate(&lt;the new baud rate&gt;)
	The valid baud rate is 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200</documentation>
        <script><![CDATA[
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Driver Declarations
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[
	Command Handler Tables
--]]
EX_CMD = {}
PRX_CMD = {}
NOTIFY = {}
DEV_MSG = {}
LUA_ACTION = {}

--[[
Tables of functions
The following tables are function containers that are called within the following functions:	

	OnDriverInit()
		- first calls all functions contained within ON_DRIVER_EARLY_INIT table
		- then calls all functions contained within ON_DRIVER_INIT table
	OnDriverLateInit()
		- calls all functions contained within ON_DRIVER_LATEINIT table
	OnDriverUpdate()
		- calls all functions contained within ON_DRIVER_UPDATE table
	OnDriverDestroyed()
		- calls all functions contained within ON_DRIVER_DESTROYED table
	OnPropertyChanged()
		- calls all functions contained within ON_PROPERTY_CHANGED table
--]]
ON_DRIVER_INIT = {}
ON_DRIVER_EARLY_INIT = {}
ON_DRIVER_LATEINIT = {}
ON_DRIVER_UPDATE = {}
ON_DRIVER_DESTROYED = {}
ON_PROPERTY_CHANGED = {}

-- Constants
DEFAULT_PROXY_BINDINGID = 5001
	  
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Common Driver Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
--[[
	OnPropertyChanged
		Function called by Director when a property changes value.
	Parameters
		sProperty
			Name of property that has changed.
	Remarks
		The value of the property that has changed can be found with: Properties[sName]. Note
		that OnPropertyChanged is not called when the Property has been changed by the driver
		calling the UpdateProperty command, only when the Property is changed by the user from
		the Properties Page. This function is called by Director when a property changes value.
--]]
function OnPropertyChanged(sProperty)
	Dbg:Trace("OnPropertyChanged(" .. sProperty .. ") changed to: " .. Properties[sProperty])

	local propertyValue = Properties[sProperty]
	
	-- Remove any spaces (trim the property)
	local trimmedProperty = string.gsub(sProperty, " ", "")

	-- if function exists then execute (non-stripped)
	if (ON_PROPERTY_CHANGED[sProperty] ~= nil and type(ON_PROPERTY_CHANGED[sProperty]) == "function") then
		ON_PROPERTY_CHANGED[sProperty](propertyValue)
		return
	-- elseif trimmed function exists then execute
	elseif (ON_PROPERTY_CHANGED[trimmedProperty] ~= nil and type(ON_PROPERTY_CHANGED[trimmedProperty]) == "function") then
		ON_PROPERTY_CHANGED[trimmedProperty](propertyValue)
		return
	end
end

function ON_PROPERTY_CHANGED.DebugMode(propertyValue)
	gDebugTimer:KillTimer()
	Dbg:OutputPrint(propertyValue:find("Print") ~= nil)
	Dbg:OutputC4Log(propertyValue:find("Log") ~= nil)
	if (propertyValue == "Off") then return end
	gDebugTimer:StartTimer()
end

function ON_PROPERTY_CHANGED.DebugLevel(propertyValue)
	Dbg:SetLogLevel(tonumber(string.sub(propertyValue, 1, 1)))
end

---------------------------------------------------------------------
-- ExecuteCommand Code
---------------------------------------------------------------------
--[[
	ExecuteCommand
		Function called by Director when a command is received for this DriverWorks driver.
		This includes commands created in Composer programming.
	Parameters
		sCommand
			Command to be sent
		tParams
			Lua table of parameters for the sent command
--]]
function ExecuteCommand(sCommand, tParams)
	Dbg:Trace("ExecuteCommand(" .. sCommand .. ")")
	Dbg:Info(tParams)

	-- Remove any spaces (trim the command)
	local trimmedCommand = string.gsub(sCommand, " ", "")

	-- if function exists then execute (non-stripped)
	if (EX_CMD[sCommand] ~= nil and type(EX_CMD[sCommand]) == "function") then
		EX_CMD[sCommand](tParams)
	-- elseif trimmed function exists then execute
	elseif (EX_CMD[trimmedCommand] ~= nil and type(EX_CMD[trimmedCommand]) == "function") then
		EX_CMD[trimmedCommand](tParams)
	-- handle the command
	elseif (EX_CMD[sCommand] ~= nil) then
		QueueCommand(EX_CMD[sCommand])
	else
		Dbg:Alert("ExecuteCommand: Unhandled command = " .. sCommand)
	end
end

--[[
	Define any functions of commands (EX_CMD.<command>) received from ExecuteCommand that need to be handled by the driver.
--]]

--[[
	EX_CMD.LUA_ACTION
		Function called for any actions executed by the user from the Actions Tab in Composer.
--]]
function EX_CMD.LUA_ACTION(tParams)
	if tParams ~= nil then
		for cmd,cmdv in pairs(tParams) do
			if cmd == "ACTION" then
				if (LUA_ACTION[cmdv] ~= nil) then
					LUA_ACTION[cmdv]()
				else
					Dbg:Alert("Undefined Action")
					Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
				end
			else
				Dbg:Alert("Undefined Command")
				Dbg:Alert("Key: " .. cmd .. " Value: " .. cmdv)
			end
		end
	end
end

--[[
	LUA_ACTION.DisplayGlobals
		Implementation of Action "Display Globals". Executed when selecting the "Display Globals" action within Composer.
		Provided as an example for actions.
--]]
function LUA_ACTION.DisplayGlobals()
	print ("Global Variables")
	print ("----------------------------")

	for k,v in pairs(_G) do	-- globals`
		if not (type(v) == "function") then
			--print(k .. ":  " .. tostring(v))
			if (string.find(k, "^g%L")  == 1) then
				print(k .. ":  " .. tostring(v))
				if (type(v) == "table") then
					PrintTable(v, "   ")
				end
			end
		end
	end

	print ("")
end

function PrintTable(tValue, sIndent)
	sIndent = sIndent or "   "
	for k,v in pairs(tValue) do
		print(sIndent .. tostring(k) .. ":  " .. tostring(v))
		if (type(v) == "table") then
			PrintTable(v, sIndent .. "   ")
		end
	end
end

---------------------------------------------------------------------
-- ReceivedFromProxy Code
---------------------------------------------------------------------
--[[
	ReceivedFromProxy(idBinding, sCommand, tParams)
		Function called by Director when a proxy bound to the specified binding sends a
		BindMessage to the DriverWorks driver.

	Parameters
		idBinding
			Binding ID of the proxy that sent a BindMessage to the DriverWorks driver.
		sCommand
			Command that was sent
		tParams
			Lua table of received command parameters
--]]
function ReceivedFromProxy(idBinding, sCommand, tParams)
	if (sCommand ~= nil) then
		if(tParams == nil)		-- initial table variable if nil
			then tParams = {}
		end
		Dbg:Trace("ReceivedFromProxy(): " .. sCommand .. " on binding " .. idBinding .. "; Call Function " .. sCommand .. "()")
		Dbg:Info(tParams)

		if (PRX_CMD[sCommand]) ~= nil then
			PRX_CMD[sCommand](idBinding, tParams)
		else
			Dbg:Alert("ReceivedFromProxy: Unhandled command = " .. sCommand)
		end
	end
end

---------------------------------------------------------------------
-- Notification Code
---------------------------------------------------------------------
-- notify with parameters
function SendNotify(notifyText, Parms, bindingID)
	C4:SendToProxy(bindingID, notifyText, Parms, "NOTIFY")
end

-- A notify with no parameters
function SendSimpleNotify(notifyText, ...)
	bindingID = select(1, ...) or DEFAULT_PROXY_BINDINGID
	C4:SendToProxy(bindingID, notifyText, {}, "NOTIFY")
end

---------------------------------------------------------------------
-- Initialization/Destructor Code
---------------------------------------------------------------------
--[[
	OnDriverInit
		Invoked by director when a driver is loaded. This API is provided for the driver developer to contain all of the driver
		objects that will require initialization.
--]]
function OnDriverInit()
	C4:ErrorLog("INIT_CODE: OnDriverInit()")
	-- Call all ON_DRIVER_EARLY_INIT functions.
	for k,v in pairs(ON_DRIVER_EARLY_INIT) do
		if (ON_DRIVER_EARLY_INIT[k] ~= nil and type(ON_DRIVER_EARLY_INIT[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_EARLY_INIT." .. k .. "()")
			ON_DRIVER_EARLY_INIT[k]()
		end
	end

	-- Call all ON_DRIVER_INIT functions
	for k,v in pairs(ON_DRIVER_INIT) do
		if (ON_DRIVER_INIT[k] ~= nil and type(ON_DRIVER_INIT[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_INIT." .. k .. "()")
			ON_DRIVER_INIT[k]()
		end
	end

	-- Fire OnPropertyChanged to set the initial Headers and other Property global sets, they'll change if Property is changed.
	for k,v in pairs(Properties) do
		OnPropertyChanged(k)
	end
end

--[[
	OnDriverUpdate
		Invoked by director when an update to a driver is requested. This request can occur either by adding a new version of a driver
		through the driver search list or right clicking on the driver and selecting "Update Driver" from within ComposerPro.
		Its purpose is to initialize all components of the driver that are reset during a driver update.
--]]
function OnDriverUpdate()
	C4:ErrorLog("INIT_CODE: OnDriverUpdate()")
	
	-- Call all ON_DRIVER_UPDATE functions
	for k,v in pairs(ON_DRIVER_UPDATE) do
		if (ON_DRIVER_UPDATE[k] ~= nil and type(ON_DRIVER_UPDATE[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_UPDATE." .. k .. "()")
			ON_DRIVER_UPDATE[k]()
		end
	end
end

--[[
	OnDriverLateInit
		Invoked by director after all drivers in the project have been loaded. This API is provided
		for the driver developer to contain all of the driver objects that will require initialization
		after all drivers in the project have been loaded.
--]]
function OnDriverLateInit()
	C4:ErrorLog("INIT_CODE: OnDriverLateInit()")
	
	-- Call all ON_DRIVER_LATEINIT functions
	for k,v in pairs(ON_DRIVER_LATEINIT) do
		if (ON_DRIVER_LATEINIT[k] ~= nil and type(ON_DRIVER_LATEINIT[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_LATEINIT." .. k .. "()")
			ON_DRIVER_LATEINIT[k]()
		end
	end
end


--[[
	OnDriverDestroyed
		Function called by Director when a driver is removed. Release things this driver has allocated such as timers.
--]]
function OnDriverDestroyed()
	C4:ErrorLog("INIT_CODE: OnDriverDestroyed()")
	-- Call all ON_DRIVER_DESTROYED functions
	for k,v in pairs(ON_DRIVER_DESTROYED) do
		if (ON_DRIVER_DESTROYED[k] ~= nil and type(ON_DRIVER_DESTROYED[k]) == "function") then
			C4:ErrorLog("INIT_CODE: ON_DRIVER_DESTROYED." .. k .. "()")
			ON_DRIVER_DESTROYED[k]()
		end
	end
end

--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
-- Debug Logging Code
--=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Log = {}

-- Create a Table with Logging functions
function Log:Create()
	
	-- table for logging functions
	local lt = {}
	
	lt._logLevel = 0
	lt._outputPrint = false
	lt._outputC4Log = false
	lt._logName =  "Set Log Name to display"
	
	function lt:SetLogLevel(level)
		self._logLevel = level
	end
	
	function lt:OutputPrint(value)
		self._outputPrint = value
	end
	
	function lt:OutputC4Log(value)
		self._outputC4Log = value
	end
	
	function lt:SetLogName(name)
		self._logName = name
	end

	function lt:Enabled()
		return (self._outputPrint or self._outputC4Log)
	end
	
	function lt:PrintTable(tValue, sIndent)
		if (type(tValue) == "table") then
			if (self._outputPrint) then
				for k,v in pairs(tValue) do
					print(sIndent .. tostring(k) .. ":  " .. tostring(v))
					if (type(v) == "table") then
						self:PrintTable(v, sIndent .. "   ")
					end
				end
			end
	
			if (self._outputC4Log) then
				for k,v in pairs(tValue) do
					C4:ErrorLog(self._logName .. ": " .. sIndent .. tostring(k) .. ":  " .. tostring(v))
					if (type(v) == "table") then
						self:PrintTable(v, sIndent .. "   ")
					end
				end
			end

		else
			if (self._outputPrint) then
				print (sIndent .. tValue)
			end
			
			if (self._outputC4Log) then
				C4:ErrorLog(self._logName .. ": " .. sIndent .. tValue)
			end
		end
	end
		
	function lt:Print(logLevel, sLogText)
		if (self._logLevel >= logLevel) then
			if (type(sLogText) == "table") then
				self:PrintTable(sLogText, "   ")
				return
			end
			
			if (self._outputPrint) then
				print (sLogText)
			end

			if (self._outputC4Log) then
				C4:ErrorLog(self._logName .. ": " .. sLogText)
			end
		end
	end
	
	function lt:Alert(strDebugText)
		self:Print(0, strDebugText)
	end
	
	function lt:Error(strDebugText)
		self:Print(1, strDebugText)
	end
	
	function lt:Warn(strDebugText)
		self:Print(2, strDebugText)
	end
	
	function lt:Info(strDebugText)
		self:Print(3, strDebugText)
	end
	
	function lt:Trace(strDebugText)
		self:Print(4, strDebugText)
	end
	
	function lt:Debug(strDebugText)
		self:Print(5, strDebugText)
	end
	
	return lt
end

function ON_DRIVER_EARLY_INIT.LogLib()
	-- Create and initialize debug logging
	Dbg = Log.Create()
	Dbg:SetLogName("NHDZ210")
end

function ON_DRIVER_INIT.LogLib()
	-- Create Debug Timer
	gDebugTimer = Timer:Create("Debug", 45, "MINUTES", OnDebugTimerExpired)
end

--[[
	OnDebugTimerExpired
		Debug timer callback function
--]]
function OnDebugTimerExpired()
	Dbg:Warn("Turning Debug Mode Off (timer expired)")
	gDebugTimer:KillTimer()
	C4:UpdateProperty("Debug Mode", "Off")
	OnPropertyChanged("Debug Mode")
end
      
---------------------------------------------------------------------
-- Timer Code
---------------------------------------------------------------------
Timer = {}

-- Create a Table with Timer functions
function Timer:Create(name, interval, units, Callback, repeating, Info)
	-- timers table
	local tt = {}
	
	tt._name = name
	tt._timerID = TimerLibGetNextTimerID()
	tt._interval = interval
	tt._units = units
	tt._repeating = repeating or false
	tt._Callback = Callback
	tt._info = Info or ""
	tt._id = 0

	function tt:StartTimer(...)
		self:KillTimer()
		
		-- optional parameters (interval, units, repeating)
		if ... then
			local interval = select(1, ...)
			local units = select(2, ...)
			local repeating = select(3, ...)
			
			self._interval = interval or self._interval
			self._units = units or self._units
			self._repeating = repeating or self._repeating
		end
		
		if (self._interval > 0) then
			Dbg:Trace("Starting Timer: " .. self._name)
			self._id = C4:AddTimer(self._interval, self._units, self._repeating)
		end
	end

	function tt:KillTimer()
		if (self._id) then
			self._id = C4:KillTimer(self._id)
		end
	end
	
	function tt:TimerStarted()
		return (self._id ~= 0)
	end
			
	function tt:TimerStopped()
		return not self:TimerStarted()
	end
	
	gTimerLibTimers[tt._timerID] = tt
	Dbg:Trace("Created timer " .. tt._name)
	
	return tt
end

function TimerLibGetNextTimerID()
	gTimerLibTimerCurID = gTimerLibTimerCurID + 1
	return gTimerLibTimerCurID
end

function ON_DRIVER_EARLY_INIT.TimerLib()
	gTimerLibTimers = {}
	gTimerLibTimerCurID = 0
end

function ON_DRIVER_DESTROYED.TimerLib()
	-- Kill open timers
	for k,v in pairs(gTimerLibTimers) do
		v:KillTimer()
	end
end

--[[
	OnTimerExpired
		Function called by Director when the specified Control4 timer expires.
	Parameters
		idTimer
			Timer ID of expired timer.
--]]
function OnTimerExpired(idTimer)
	for k,v in pairs(gTimerLibTimers) do
		if (idTimer == v._id) then
			if (v._Callback) then
				v._Callback(v._info)
			end
		end
	end
end
      

------------------------------------------------------------------------
-- Below are mine driver common scripts
-- Will do below
-- 1. First of all, declare several important status variable
-- 2. Add properties change handler
-- 3. Add "show status" command handler
-- 4. Add code for using or not using serial agent
-- 5. Add error message display method

local COMMON_CONSTANT = {
	COMM_WITH_SERIAL_AGENT = "comm-by-serial-agent",
	COMM_WITH_SERIAL_PORT = "comm-by-serial-port"
}
--- Serial communication address for current device
local deviceAddress
--- communication mode. 1- use serial-agent driver, 2- directly use serial port
local communicationMode		
local serialAgentDevId = 1
local oldSerialAgentDevId = 1
--- print binary serial data package or not
local isDumpSerialData = false
--- buffer for framed receving-command strings
local recvFrameDatas = {}
--- framing timer
local framingTimer
local frameingTimerCnt = 0

--- action commond
function LUA_ACTION.ShowStatus()
	print("Communication mode is " .. communicationMode)
	print("Device self serial communication address is "..deviceAddress)
	print("Dump serial data was set to ".. (isDumpSerialData and "Yes" or "No"))
	print("Serial agent used is "..serialAgentDevId)
	print("Illumination Torlerance is "..torlerence)
end

--- Common property on-change handlers
ON_PROPERTY_CHANGED["Use Serial Agent"] = function(propValue)
	deviceAddress = tonumber(propValue)
	if (propValue == "Yes") then
		communicationMode = COMMON_CONSTANT.COMM_WITH_SERIAL_AGENT
	else
		communicationMode = COMMON_CONSTANT.COMM_WITH_SERIAL_PORT
	end
	Dbg:Info("Set communication mode to "..(isDumpSerialData and "Yes" or "No"))
	RebindSerialAgent()
end

ON_PROPERTY_CHANGED["Address"] = function(propValue) 
	deviceAddress = tonumber(propValue) 
	Dbg:Info("Set device self serial communication address to "..deviceAddress)
end

ON_PROPERTY_CHANGED["Dump Serial Data"] = function(propValue)
	isDumpSerialData = propValue == "Yes"
	Dbg:Info("Set dump serial data to "..(isDumpSerialData and "Yes" or "No"))
end

ON_PROPERTY_CHANGED["Serial Agent Device ID"] = function(propValue) 
	serialAgentDevId = tonumber(propValue) 
	Dbg:Info("Serial agent used is "..serialAgentDevId)
	RebindSerialAgent()
end

--- Common functions for comminication
--- register with serial-agent variables
function RebindSerialAgent()
	C4:UnregisterVariableListener(oldSerialAgentDevId, 1002)
	Dbg:Info("Release old binded serial agent "..oldSerialAgentDevId)
	oldSerialAgentDevId = serialAgentDevId
	if (serialAgentDevId > 0 and communicationMode == COMMON_CONSTANT.COMM_WITH_SERIAL_AGENT) then
		C4:RegisterVariableListener(serialAgentDevId, 1002)
		Dbg:Info("Bind me to serial agent "..serialAgentDevId)
	end
end
--- hanlde serial-agent notification
function OnWatchedVariableChanged(idDevice, idVariable, strValue)
	Dbg:Debug({idDevice=idDevice, idVariable=idVariable, strValue=strValue})
	
	if (idDevice == serialAgentDevId and idVariable==1002 and communicationMode == COMMON_CONSTANT.COMM_WITH_SERIAL_AGENT) then
		OnRecieveFromSerialAgent(strValue)
	end
end
 
--- forward data received from serial-agent
function OnRecieveFromSerialAgent(strDataSeq)
	if (not strDataSeq) then
		return
	end
	local numDataSeq = tonumber(strDataSeq)
	if (not numDataSeq or numDataSeq < 1002) then
		return
	end
	local recvStr = C4:GetDeviceVariable(serialAgentDevId, numDataSeq)
	local strData = C4:Base64Decode(recvStr)
	if (isDumpSerialData) then
		print("\n\n\nReceive below data from serial agent:")
		hexdump(strData)
	end
	OnSerialDataReceived(strData)
end
--- handle data received from serial port
function ReceivedFromSerial(idBinding, strData)
	if strData == nil then
		return
	end
	if (communicationMode ~= COMMON_CONSTANT.COMM_WITH_SERIAL_PORT) then
		return
	end
	
	table.insert(recvStrDatas, strData)
	if (#strData < pieceSize) then
		frameingTimerCnt = 0
		handleFrameData()
	else
		frameingTimerCnt = 3
	end
end

function cutdownTimer()
	if (frameingTimerCnt == 0) then
		return
	end
	frameingTimerCnt = frameingTimerCnt - 1
	if (frameingTimerCnt <= 0) then
		handleFrameData()
	end
end

-- when found a whole piece frame data, send out the signal
function handleFrameData()
	local str = "";
	local len = #recvStrDatas
	if (len < 1) then
		return
	end

	for k=1,len do
		str =  str .. recvStrDatas[k]
	end
	recvStrDatas = {}

	if (isDumpSerialData) then
		print("\n\n\nReceive below data from serial port")
		hexdump(strData)
	end
	OnSerialDataReceived(strData)
end


function OnSerialDataReceived(strData)
	handleCommandResponse(1, strData)
end

function ON_DRIVER_INIT.driverInit()
	framingTimer = Timer:Create("framing timer", 10, "MILLISECONDS", OnTestTimer, true, "framing timer")
	framingTimer:StartTimer()
	RebindSerialAgent()
	C4:AddVariable("Illumination",0, "NUMBER")
	pollingTimer = Timer:Create("polling timer", 10, "SECONDS", readLumination, true, "polling timer")
	pollingTimer:StartTimer()
end
----------------------------------------------------------------------------


function SendCommand(strData)
	
	if communicationMode == COMMON_CONSTANT.COMM_WITH_SERIAL_PORT then
		C4:SendToSerial(1, strData)
		if (isDumpSerialData) then
			print("\n\n\nSend below data to serial port")
			hexdump(strData)
		end
		return
	end
	
	local base64Str = C4:Base64Encode(strData)
	C4:SendToDevice(serialAgentDevId, "SendCommand", {strData=base64Str})
	if (isDumpSerialData) then
		print("\n\n\nSend below data to serial agent")
		hexdump(strData)
	end
end


util = {
  idBinding = 1,
}


-- this is for simulator, should be set to empty function when in real driver
function util.handleReceivedFromSerial()
   C4:ProcessSerial(util.idBinding,util.ReceivedFromSerial)
end




function util.byte0 (data) 
  return bit.band(data, 0xFF)
end

function util.byte1 (data)
  return bit.band(bit.rshift(data, 8), 0xFF)
end

function util.crc16 (buf, len)
  local crc = 0x0000ffff;
  len = len or #buf
  for byte=1, len do
    local curByte = string.byte(buf,byte,byte)
    crc = bit.band(bit.bxor(crc, curByte), 0xFFFF)
    for j=1,8,1 do
      local f = bit.band(crc, 1)
      crc = bit.band(bit.rshift(crc, 1), 0x7FFF)
      if (f > 0) then
        crc = bit.bxor(crc, 0xa001)
      end
    end
  end
  -- 485 CRC is low-byte first, high-byte then
  return string.char(util.byte0(crc))..string.char(util.byte1(crc))
end

function util.verifyCrc16 (strData, numLen)
  numLen = numLen or #strData
  local calcCrc = util.crc16(strData, numLen-2)
  local recvCrc = string.sub(strData, numLen-1,numLen)
  return calcCrc == recvCrc
end

function util.toUShort (strData)
  local rst = 0;
  local byte0, byte1 = string.byte(strData,1,2)
  return byte0 * 256 + byte1
end

function util.toShort (strData)
  local rst = util.toUShort(strData)
  if (rst > 0x7FFF) then
    return rst - 0x10000
  end
  return rst
end

function util.sendCmd (strCmd)
  local crcCmd = tohex(strCmd)
  crcCmd = crcCmd .. util.crc16(crcCmd)
  SendCommand(crcCmd)
end


local constants = {
  CMD_READ_CONCENTRATION = 3,
  CMD_SET_DEVICE_ID = 6,
  CMD_GET_DEVICE_ID = 0x25,
  CMD_SET_FACTOR = 6,
  
  ERROR_NO_ERROR = "SUCCESS",
  ERROR_NO_RESPONSE = "NO RESPONSE",
  ERROR_CRC_ERROR = "CRC ERROR",
  ERROR_WRONG_FUNCTION_CODE = "WRONG FUNCTION CODE",
  ERROR_WRONG_RESPONSE_CODE = "WRONG RESPONSE CODE",
  ERROR_HALF_RESPONSE = "HALF_BACKED RESPONSE",
  ERROR_SET_FAILED = "FAILED TO SET VALUE"
}
  
local verifyRules = {
  [4] = { [0x04] = true, minLength = 7 },
  [6] = { [0x06] = true, minLength = 8 }
}

function verifyResponse(reqFuncCode, strData)
  -- verify CRC
  local result = {errorState=constants.ERROR_NO_ERROR}
  if (not util.verifyCrc16(strData,#strData)) then
    result.errorState = constants.ERROR_CRC_ERROR
    return result
  end
  
  -- is this my supported function code?
  local verifyRule = verifyRules[reqFuncCode]
  if (not verifyRule) then
    result.errorState = constants.ERROR_WRONG_FUNCTION_CODE
    return result
  end
  
  local respFunCode = string.byte(strData,2,2)
  if (not verifyRule[respFunCode]) then
    result.errorState = constants.ERROR_WRONG_RESPONSE_CODE
    result.code = respFunCode
    return result
  end
  
  if (#strData < verifyRule.minLength) then
    result.errorState = constants.ERROR_HALF_RESPONSE
    return result
  end
  
  return result
end

local cmdMaker = {
   commandCode = nil,
   commandParams = nil,
   cmdReadLumination = {
      variable = {value="Lumination"},
      command = function(tParams)
          return string.format("%02X 04 00 00 00 02 ", tParams[1])
        end,
      responseHandler = function(idBinding, strData, tParams)
          local result = verifyResponse(4, strData)
          if (result.errorState ~= constants.ERROR_NO_ERROR) then
            return result
          end
          local valHi = util.toUShort(string.sub(strData,4,5))
          local valLow = util.toUShort(string.sub(strData,6,7))
          result.value = valHi * 0x10000 + valLow
          return result
        end
   },
   cmdChangeAddress = {
      command = function(tParams)
          return string.format("%02X 06 00 42 00 %02X ",tParams[1], tParams[2])
        end,
      responseHandler = function(idBinding, strData, tParams)
          local result = verifyResponse(6, strData)
          local value = string.byte(strData,6,6)
          if (value ~= tParams[2]) then
            result.errorState = constants.ERROR_SET_FAILED
          else
            deviceAddress = value
          end
          return result
        end
   },
   cmdSetBaudRate = {
      command = function(tParams)
          return string.format("%02X 06 00 40 00 %02X ",tParams[1], tParams[2])
        end,
      responseHandler = function(idBinding, strData, tParams)
          local result = verifyResponse(6, strData)
          local value = string.byte(strData,6,6)
          if (value ~= tParams[2]) then
            result.errorState = constants.ERROR_SET_FAILED
          end
          return result
        end
   }
}

function sendOneCommand(code, tParams)
--  print("\n emit "..code)
  local cmdInfo = cmdMaker[code]
  local cmdStr = cmdInfo.command(tParams)
--  print(cmdStr)
  cmdMaker.commandCode = code
  cmdMaker.commandParams = tParams
  util.sendCmd(cmdStr)
end

local oldLumin = 0
function handleCommandResponse(idBinding, strData)
	if #strData < 7 then
		return
	end
	
	if string.byte(strData) ~= deviceAddress then
		return
	end

  if (not cmdMaker.commandCode) then
    Dbg:Trace("nothing required by me, skip")
    return
  end
  local cmdInfo = cmdMaker[cmdMaker.commandCode]
  local params = cmdMaker.commandParams
--  print("response from " .. cmdMaker.commandCode)
  cmdMaker.commandCode = nil
  cmdMaker.commandParams = nil
--  hexdump (strData)
  local result = cmdInfo.responseHandler(idBinding, strData, params)
  if (not cmdInfo.variable) then
    return
  end
  
  if (result.errorState ~= constants.ERROR_NO_ERROR) then
    postErrorMsg("has error ".. result.errorState)
    return
  end
  
  local newLumin = result.value
  C4:UpdateProperty("Illumination", newLumin .. " lx")
  C4:SetVariable("Illumination", newLumin)
  if (oldLumin <= 0 ) then
	return
  end
  
  if (math.abs(newLumin - oldLumin) > torlerence) then
	C4:FireEvent("Illumination Changed")
  end
end

function readLumination()
  sendOneCommand('cmdReadLumination', {deviceAddress})
  postErrorMsg("Send readLumination command " .. constants.ERROR_NO_ERROR)
end

function changeAddress(newAddr)
  sendOneCommand('cmdChangeAddress', {deviceAddress, newAddr})
  postErrorMsg("Send changeAddress command " .. constants.ERROR_NO_ERROR)
end

function changeAddressByBroadcast(newAddr)
  sendOneCommand('cmdChangeAddress', {0, newAddr})
  postErrorMsg("Send changeAddressByBroadcast command " .. constants.ERROR_NO_ERROR)
end

function setBaudRate(baudRate)
  local baudRateTable = {[1200]=0, [2400]=1, [4800]=2, [9600]=3, [19200]=4, [38400]=5, [57600]=6, [115200]=7}
  local rateCode = baudRateTable[baudRate]
  if (rateCode == nil) then
    postErrorMsg ("Invalid baud rate " .. baudRate)
    return
  end
  sendOneCommand('cmdSetBaudRate', {deviceAddress, rateCode})
  postErrorMsg("Send setBaudRate command " .. constants.ERROR_NO_ERROR)
  C4:FireEcent("Baud Rate Changed")
end

function postErrorMsg(strMsg)
	Dbg:Warn(strMsg)
	C4:UpdateProperty("Error Message", strMsg)
end

torlerence = 5
ON_PROPERTY_CHANGED["Illumination Torlerance"] = function(propValue) 
	torlerence = tonumber(propValue) 
	Dbg:Info("Illumination Torlerance set to "..torlerence)
	postErrorMsg(constants.ERROR_NO_ERROR)
end


local tgtNewAddress = 1
local msgChangeBySelf = "Please change me to "
local msgChangeByBroadcasr = "Please change address to "
ON_PROPERTY_CHANGED["Change Address To"] = function(propValue) 
	tgtNewAddress = tonumber(propValue) 
	C4:UpdateProperty("Change Address Request", "You must input: [Please change me/address to "..tgtNewAddress.."] to do real change")
	postErrorMsg("Please follow the message appeared in \"Change Address Request\"")
end

ON_PROPERTY_CHANGED["Polling Seconds"] = function(propValue)
	if (pollingTimer) then
		pollingTimer:KillTimer()
	end
	
	local timeIntv = tonumber(propValue)
	if (timeIntv <= 0) then
		postErrorMsg("Illumination polling schedule is closed")
		return
	end

	pollingTimer = Timer:Create("polling timer", timeIntv, "SECONDS", readLumination, true, "polling timer")
	pollingTimer:StartTimer()
	postErrorMsg(constants.ERROR_NO_ERROR)
end

ON_PROPERTY_CHANGED["Change Address Request"] = function(propValue)
	posStart, posEnd = string.find(propValue, msgChangeBySelf)
	print(posStart, posEnd,#msgChangeBySelf)
	if posStart == 1 and posEnd == #msgChangeBySelf then
		local inputAddr = tonumber(string.sub(propValue, posEnd+1))
		if (tgtNewAddress ~= inputAddr) then
			postErrorMsg("Error: request new address must same as input in request")
			return
		end
		changeAddress(tgtNewAddress)
		C4:UpdateProperty("Change Address Request", "")
		C4:FireEvent("Address Changed")
		return
	end
	
	posStart, posEnd = string.find(propValue, msgChangeByBroadcasr)
	print(posStart, posEnd,#msgChangeByBroadcasr)
	if posStart == 1 and posEnd == #msgChangeByBroadcasr then
		local inputAddr = tonumber(string.sub(propValue, posEnd+1))
		if (tgtNewAddress ~= inputAddr) then
			postErrorMsg("Error: request new address must same as input in request")
			return
		end
		changeAddressByBroadcast(tgtNewAddress)
		C4:UpdateProperty("Change Address Request", "")
		C4:FireEvent("Address Changed")
		return
	end
	postErrorMsg("Error: Must follow change address request")
end

function LUA_ACTION.ReadIllumination()
	readLumination()
end

function EX_CMD.readLumination()
	readLumination()
end

function EX_CMD.WhoAmI(tParams)
  local resp = {
	  deviceId = C4:GetDeviceID(),
	  profile = "NHZD210"
  }
  C4:SendToDevice(tParams.deviceId, "UpdateProfile", resp)
end

]]></script>
        <actions>
            <action>
                <name>Show Status</name>
                <command>ShowStatus</command>
            </action>
            <action>
                <name>Query Address By Broadcast</name>
                <command>QueryAddress</command>
            </action>
            <action>
                <name>Read Illumination</name>
                <command>ReadIllumination</command>
            </action>
        </actions>
        <commands>
            <command>
                <name>ReadIllumination</name>
                <description>ReadIllumination</description>
            </command>
        </commands>
        <properties>
            <property>
                <name>Illumination</name>
                <type>STRING</type>
                <readonly>true</readonly>
                <default />
            </property>
            <property>
                <name>Debug Level</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>2 - Warning</default>
                <items>
                    <item>0 - Alert</item>
                    <item>1 - Error</item>
                    <item>2 - Warning</item>
                    <item>3 - Info</item>
                    <item>4 - Trace</item>
                    <item>5 - Debug</item>
                </items>
            </property>
            <property>
                <name>Debug Mode</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Off</default>
                <items>
                    <item>Off</item>
                    <item>Print</item>
                    <item>Log</item>
                    <item>Print and Log</item>
                </items>
            </property>
            <property>
                <name>Address</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>10</default>
                <minimum>1</minimum>
                <maximum>255</maximum>
            </property>
            <property>
                <name>Polling Seconds</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>10</default>
                <minimum>0</minimum>
                <maximum>99999</maximum>
            </property>
            <property>
                <name>Use Serial Agent</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default>Yes</default>
                <items>
                    <item>Yes</item>
                    <item>No</item>
                </items>
            </property>
            <property>
                <name>Serial Agent Device ID</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>1</default>
                <minimum>0</minimum>
                <maximum>65535</maximum>
            </property>
            <property>
                <name>Illumination Torlerance</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>5</default>
                <minimum>1</minimum>
                <maximum>1000000</maximum>
            </property>
            <property>
                <name>Dump Serial Data</name>
                <type>LIST</type>
                <readonly>false</readonly>
                <default />
                <items>
                    <item>Yes</item>
                    <item>No</item>
                </items>
            </property>
            <property>
                <name>Error Message</name>
                <type>STRING</type>
                <readonly>true</readonly>
                <default>SUCCESS</default>
            </property>
            <property>
                <name>Change Address To</name>
                <type>RANGED_INTEGER</type>
                <readonly>false</readonly>
                <default>1</default>
                <minimum>1</minimum>
                <maximum>255</maximum>
            </property>
            <property>
                <name>Change Address Request</name>
                <type>STRING</type>
                <readonly>false</readonly>
                <default>You must nput "Please change address to xxx" to change address</default>
            </property>
        </properties>
    </config>
    <events>
        <event>
            <id>1</id>
            <name>Illumination Changed</name>
            <description>illumination changed</description>
        </event>
        <event>
            <id>2</id>
            <name>Baud Rate Changed</name>
            <description>User changed the Baud Rate of this device</description>
        </event>
        <event>
            <id>3</id>
            <name>Address Changed</name>
            <description>User Changed the current device address</description>
        </event>
    </events>
</devicedata>